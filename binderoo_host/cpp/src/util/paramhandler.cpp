/*
Binderoo
Copyright (c) 2016, Remedy Entertainment
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the copyright holder (Remedy Entertainment) nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL REMEDY ENTERTAINMENT BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
//----------------------------------------------------------------------------

// THIS FILE IS AUTOGENERATED - DO NOT MODIFY!
//----------------------------------------------------------------------------

#include "binderoo/defs.h"
#include "binderoo/functiontraits.h"
#include "binderoo/imports.h"
#include "paramhandler.h"

#include <map>
//----------------------------------------------------------------------------

static void invoker_0( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)() > > importedFunction( pFunction );
	importedFunction();
}

static void invoker_1( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)() > > importedFunction( pFunction );
	const char* returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_2( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)() > > importedFunction( pFunction );
	bool returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_3( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)() > > importedFunction( pFunction );
	char returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_4( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)() > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_5( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)() > > importedFunction( pFunction );
	short returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_6( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)() > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_7( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)() > > importedFunction( pFunction );
	int returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_8( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)() > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_9( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)() > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_10( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)() > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_11( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)() > > importedFunction( pFunction );
	float returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_12( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 0 )
	{
		handler.setReturn( "Invalid parameter count! 0 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)() > > importedFunction( pFunction );
	double returnedVal = importedFunction();
	handler.setReturn( returnedVal );
}

static void invoker_13( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ) );
}

static void invoker_14( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ) );
}

static void invoker_15( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ) );
}

static void invoker_16( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ) );
}

static void invoker_17( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ) );
}

static void invoker_18( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ) );
}

static void invoker_19( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ) );
}

static void invoker_20( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ) );
}

static void invoker_21( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ) );
}

static void invoker_22( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ) );
}

static void invoker_23( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ) );
}

static void invoker_24( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ) );
}

static void invoker_25( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_26( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_27( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_28( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_29( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_30( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_31( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_32( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_33( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_34( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_35( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_36( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_37( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_38( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_39( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_40( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_41( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_42( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_43( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_44( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_45( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_46( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_47( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_48( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_49( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_50( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_51( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_52( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_53( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_54( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_55( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_56( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_57( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_58( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_59( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_60( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_61( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_62( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_63( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_64( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_65( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_66( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_67( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_68( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_69( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_70( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_71( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_72( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_73( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_74( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_75( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_76( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_77( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_78( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_79( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_80( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_81( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_82( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_83( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_84( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_85( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_86( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_87( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_88( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_89( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_90( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_91( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_92( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_93( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_94( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_95( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_96( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_97( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_98( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_99( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_100( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_101( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_102( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_103( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_104( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_105( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_106( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_107( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_108( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_109( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_110( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_111( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_112( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_113( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_114( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_115( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_116( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_117( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_118( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_119( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_120( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_121( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_122( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_123( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_124( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_125( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_126( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_127( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_128( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_129( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_130( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_131( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_132( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_133( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_134( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_135( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_136( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_137( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_138( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_139( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_140( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_141( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_142( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_143( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_144( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_145( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_146( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_147( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_148( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_149( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_150( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_151( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_152( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_153( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_154( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_155( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_156( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_157( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_158( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_159( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_160( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_161( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_162( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_163( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_164( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_165( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_166( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_167( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_168( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 1 )
	{
		handler.setReturn( "Invalid parameter count! 1 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ) );
	handler.setReturn( returnedVal );
}

static void invoker_169( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_170( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_171( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_172( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_173( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_174( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_175( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_176( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_177( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_178( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_179( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_180( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( const char*, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_181( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_182( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_183( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_184( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_185( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_186( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_187( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_188( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_189( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_190( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_191( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_192( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( bool, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_193( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_194( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_195( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_196( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_197( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_198( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_199( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_200( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_201( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_202( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_203( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_204( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( char, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_205( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_206( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_207( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_208( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_209( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_210( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_211( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_212( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_213( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_214( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_215( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_216( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned char, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_217( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_218( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_219( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_220( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_221( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_222( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_223( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_224( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_225( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_226( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_227( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_228( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( short, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_229( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_230( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_231( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_232( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_233( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_234( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_235( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_236( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_237( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_238( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_239( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_240( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned short, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_241( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_242( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_243( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_244( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_245( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_246( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_247( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_248( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_249( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_250( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_251( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_252( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_253( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_254( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_255( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_256( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_257( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_258( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_259( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_260( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_261( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_262( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_263( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_264( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( unsigned int, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_265( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_266( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_267( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_268( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_269( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_270( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_271( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_272( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_273( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_274( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_275( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_276( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( int64_t, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_277( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_278( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_279( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_280( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_281( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_282( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_283( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_284( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_285( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_286( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_287( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_288( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( uint64_t, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_289( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_290( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_291( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_292( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_293( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_294( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_295( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_296( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_297( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_298( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_299( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_300( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( float, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_301( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, const char* ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
}

static void invoker_302( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, bool ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
}

static void invoker_303( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
}

static void invoker_304( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, unsigned char ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
}

static void invoker_305( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
}

static void invoker_306( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, unsigned short ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
}

static void invoker_307( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
}

static void invoker_308( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, unsigned int ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
}

static void invoker_309( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, int64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
}

static void invoker_310( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, uint64_t ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
}

static void invoker_311( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, float ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
}

static void invoker_312( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< void(*)( double, double ) > > importedFunction( pFunction );
	importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
}

static void invoker_313( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_314( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_315( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_316( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_317( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_318( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_319( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_320( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_321( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_322( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_323( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_324( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( const char*, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_325( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_326( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_327( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_328( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_329( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_330( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_331( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_332( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_333( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_334( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_335( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_336( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( bool, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_337( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_338( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_339( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_340( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_341( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_342( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_343( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_344( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_345( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_346( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_347( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_348( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( char, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_349( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_350( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_351( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_352( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_353( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_354( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_355( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_356( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_357( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_358( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_359( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_360( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned char, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_361( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_362( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_363( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_364( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_365( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_366( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_367( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_368( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_369( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_370( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_371( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_372( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( short, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_373( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_374( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_375( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_376( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_377( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_378( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_379( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_380( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_381( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_382( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_383( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_384( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned short, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_385( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_386( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_387( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_388( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_389( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_390( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_391( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_392( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_393( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_394( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_395( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_396( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_397( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_398( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_399( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_400( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_401( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_402( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_403( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_404( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_405( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_406( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_407( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_408( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( unsigned int, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_409( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_410( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_411( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_412( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_413( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_414( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_415( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_416( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_417( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_418( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_419( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_420( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( int64_t, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_421( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_422( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_423( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_424( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_425( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_426( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_427( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_428( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_429( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_430( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_431( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_432( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( uint64_t, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_433( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_434( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_435( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_436( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_437( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_438( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_439( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_440( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_441( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_442( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_443( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_444( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( float, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_445( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, const char* ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_446( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, bool ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_447( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_448( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, unsigned char ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_449( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_450( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, unsigned short ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_451( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_452( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, unsigned int ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_453( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, int64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_454( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, uint64_t ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_455( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, float ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_456( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< const char*(*)( double, double ) > > importedFunction( pFunction );
	const char* returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_457( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_458( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_459( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_460( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_461( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_462( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_463( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_464( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_465( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_466( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_467( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_468( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( const char*, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_469( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_470( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_471( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_472( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_473( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_474( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_475( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_476( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_477( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_478( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_479( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_480( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( bool, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_481( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_482( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_483( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_484( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_485( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_486( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_487( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_488( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_489( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_490( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_491( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_492( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( char, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_493( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_494( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_495( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_496( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_497( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_498( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_499( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_500( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_501( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_502( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_503( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_504( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned char, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_505( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_506( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_507( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_508( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_509( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_510( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_511( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_512( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_513( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_514( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_515( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_516( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( short, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_517( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_518( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_519( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_520( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_521( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_522( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_523( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_524( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_525( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_526( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_527( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_528( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned short, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_529( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_530( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_531( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_532( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_533( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_534( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_535( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_536( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_537( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_538( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_539( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_540( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_541( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_542( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_543( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_544( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_545( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_546( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_547( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_548( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_549( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_550( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_551( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_552( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( unsigned int, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_553( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_554( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_555( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_556( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_557( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_558( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_559( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_560( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_561( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_562( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_563( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_564( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( int64_t, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_565( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_566( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_567( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_568( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_569( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_570( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_571( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_572( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_573( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_574( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_575( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_576( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( uint64_t, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_577( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_578( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_579( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_580( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_581( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_582( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_583( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_584( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_585( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_586( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_587( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_588( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( float, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_589( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, const char* ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_590( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, bool ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_591( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_592( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, unsigned char ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_593( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_594( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, unsigned short ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_595( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_596( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, unsigned int ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_597( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, int64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_598( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, uint64_t ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_599( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, float ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_600( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< bool(*)( double, double ) > > importedFunction( pFunction );
	bool returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_601( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_602( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_603( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_604( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_605( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_606( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_607( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_608( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_609( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_610( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_611( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_612( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( const char*, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_613( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_614( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_615( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_616( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_617( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_618( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_619( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_620( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_621( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_622( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_623( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_624( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( bool, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_625( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_626( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_627( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_628( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_629( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_630( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_631( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_632( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_633( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_634( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_635( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_636( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( char, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_637( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_638( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_639( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_640( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_641( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_642( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_643( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_644( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_645( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_646( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_647( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_648( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned char, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_649( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_650( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_651( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_652( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_653( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_654( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_655( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_656( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_657( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_658( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_659( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_660( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( short, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_661( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_662( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_663( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_664( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_665( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_666( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_667( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_668( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_669( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_670( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_671( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_672( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned short, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_673( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_674( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_675( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_676( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_677( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_678( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_679( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_680( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_681( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_682( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_683( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_684( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_685( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_686( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_687( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_688( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_689( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_690( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_691( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_692( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_693( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_694( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_695( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_696( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( unsigned int, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_697( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_698( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_699( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_700( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_701( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_702( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_703( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_704( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_705( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_706( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_707( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_708( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( int64_t, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_709( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_710( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_711( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_712( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_713( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_714( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_715( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_716( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_717( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_718( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_719( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_720( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( uint64_t, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_721( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_722( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_723( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_724( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_725( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_726( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_727( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_728( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_729( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_730( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_731( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_732( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( float, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_733( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, const char* ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_734( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, bool ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_735( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_736( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, unsigned char ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_737( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_738( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, unsigned short ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_739( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_740( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, unsigned int ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_741( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, int64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_742( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, uint64_t ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_743( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, float ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_744( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< char(*)( double, double ) > > importedFunction( pFunction );
	char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_745( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_746( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_747( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_748( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_749( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_750( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_751( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_752( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_753( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_754( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_755( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_756( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( const char*, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_757( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_758( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_759( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_760( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_761( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_762( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_763( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_764( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_765( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_766( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_767( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_768( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( bool, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_769( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_770( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_771( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_772( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_773( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_774( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_775( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_776( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_777( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_778( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_779( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_780( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( char, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_781( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_782( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_783( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_784( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_785( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_786( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_787( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_788( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_789( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_790( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_791( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_792( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned char, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_793( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_794( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_795( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_796( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_797( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_798( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_799( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_800( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_801( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_802( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_803( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_804( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( short, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_805( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_806( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_807( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_808( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_809( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_810( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_811( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_812( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_813( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_814( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_815( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_816( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned short, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_817( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_818( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_819( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_820( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_821( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_822( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_823( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_824( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_825( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_826( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_827( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_828( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_829( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_830( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_831( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_832( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_833( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_834( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_835( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_836( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_837( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_838( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_839( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_840( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( unsigned int, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_841( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_842( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_843( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_844( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_845( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_846( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_847( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_848( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_849( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_850( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_851( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_852( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( int64_t, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_853( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_854( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_855( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_856( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_857( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_858( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_859( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_860( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_861( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_862( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_863( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_864( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( uint64_t, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_865( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_866( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_867( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_868( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_869( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_870( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_871( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_872( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_873( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_874( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_875( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_876( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( float, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_877( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, const char* ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_878( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, bool ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_879( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_880( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, unsigned char ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_881( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_882( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, unsigned short ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_883( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_884( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, unsigned int ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_885( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, int64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_886( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, uint64_t ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_887( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, float ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_888( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned char(*)( double, double ) > > importedFunction( pFunction );
	unsigned char returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_889( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_890( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_891( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_892( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_893( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_894( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_895( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_896( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_897( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_898( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_899( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_900( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( const char*, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_901( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_902( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_903( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_904( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_905( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_906( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_907( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_908( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_909( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_910( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_911( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_912( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( bool, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_913( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_914( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_915( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_916( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_917( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_918( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_919( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_920( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_921( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_922( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_923( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_924( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( char, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_925( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_926( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_927( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_928( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_929( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_930( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_931( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_932( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_933( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_934( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_935( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_936( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned char, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_937( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_938( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_939( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_940( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_941( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_942( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_943( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_944( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_945( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_946( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_947( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_948( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( short, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_949( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_950( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_951( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_952( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_953( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_954( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_955( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_956( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_957( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_958( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_959( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_960( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned short, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_961( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_962( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_963( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_964( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_965( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_966( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_967( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_968( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_969( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_970( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_971( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_972( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_973( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_974( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_975( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_976( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_977( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_978( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_979( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_980( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_981( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_982( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_983( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_984( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( unsigned int, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_985( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_986( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_987( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_988( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_989( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_990( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_991( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_992( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_993( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_994( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_995( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_996( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( int64_t, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_997( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_998( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_999( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1000( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1001( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1002( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1003( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1004( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1005( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1006( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1007( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1008( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( uint64_t, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1009( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1010( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1011( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1012( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1013( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1014( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1015( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1016( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1017( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1018( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1019( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1020( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( float, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1021( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, const char* ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1022( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, bool ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1023( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1024( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, unsigned char ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1025( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1026( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, unsigned short ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1027( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1028( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, unsigned int ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1029( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, int64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1030( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, uint64_t ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1031( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, float ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1032( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< short(*)( double, double ) > > importedFunction( pFunction );
	short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1033( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1034( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1035( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1036( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1037( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1038( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1039( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1040( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1041( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1042( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1043( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1044( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( const char*, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1045( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1046( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1047( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1048( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1049( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1050( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1051( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1052( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1053( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1054( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1055( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1056( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( bool, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1057( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1058( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1059( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1060( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1061( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1062( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1063( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1064( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1065( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1066( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1067( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1068( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( char, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1069( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1070( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1071( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1072( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1073( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1074( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1075( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1076( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1077( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1078( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1079( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1080( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned char, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1081( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1082( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1083( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1084( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1085( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1086( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1087( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1088( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1089( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1090( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1091( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1092( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( short, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1093( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1094( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1095( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1096( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1097( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1098( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1099( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1100( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1101( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1102( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1103( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1104( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned short, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1105( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1106( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1107( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1108( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1109( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1110( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1111( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1112( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1113( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1114( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1115( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1116( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1117( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1118( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1119( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1120( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1121( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1122( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1123( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1124( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1125( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1126( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1127( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1128( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( unsigned int, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1129( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1130( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1131( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1132( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1133( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1134( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1135( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1136( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1137( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1138( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1139( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1140( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( int64_t, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1141( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1142( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1143( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1144( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1145( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1146( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1147( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1148( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1149( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1150( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1151( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1152( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( uint64_t, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1153( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1154( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1155( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1156( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1157( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1158( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1159( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1160( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1161( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1162( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1163( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1164( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( float, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1165( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, const char* ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1166( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, bool ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1167( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1168( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, unsigned char ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1169( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1170( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, unsigned short ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1171( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1172( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, unsigned int ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1173( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, int64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1174( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, uint64_t ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1175( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, float ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1176( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned short(*)( double, double ) > > importedFunction( pFunction );
	unsigned short returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1177( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1178( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1179( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1180( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1181( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1182( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1183( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1184( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1185( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1186( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1187( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1188( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( const char*, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1189( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1190( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1191( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1192( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1193( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1194( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1195( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1196( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1197( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1198( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1199( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1200( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( bool, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1201( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1202( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1203( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1204( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1205( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1206( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1207( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1208( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1209( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1210( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1211( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1212( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( char, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1213( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1214( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1215( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1216( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1217( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1218( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1219( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1220( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1221( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1222( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1223( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1224( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned char, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1225( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1226( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1227( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1228( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1229( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1230( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1231( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1232( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1233( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1234( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1235( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1236( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( short, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1237( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1238( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1239( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1240( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1241( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1242( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1243( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1244( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1245( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1246( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1247( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1248( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned short, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1249( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1250( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1251( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1252( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1253( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1254( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1255( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1256( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1257( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1258( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1259( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1260( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1261( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1262( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1263( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1264( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1265( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1266( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1267( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1268( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1269( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1270( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1271( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1272( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( unsigned int, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1273( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1274( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1275( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1276( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1277( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1278( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1279( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1280( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1281( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1282( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1283( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1284( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( int64_t, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1285( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1286( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1287( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1288( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1289( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1290( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1291( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1292( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1293( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1294( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1295( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1296( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( uint64_t, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1297( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1298( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1299( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1300( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1301( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1302( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1303( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1304( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1305( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1306( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1307( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1308( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( float, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1309( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, const char* ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1310( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, bool ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1311( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1312( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, unsigned char ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1313( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1314( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, unsigned short ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1315( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1316( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, unsigned int ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1317( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, int64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1318( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, uint64_t ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1319( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, float ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1320( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int(*)( double, double ) > > importedFunction( pFunction );
	int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1321( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1322( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1323( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1324( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1325( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1326( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1327( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1328( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1329( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1330( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1331( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1332( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( const char*, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1333( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1334( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1335( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1336( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1337( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1338( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1339( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1340( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1341( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1342( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1343( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1344( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( bool, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1345( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1346( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1347( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1348( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1349( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1350( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1351( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1352( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1353( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1354( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1355( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1356( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( char, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1357( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1358( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1359( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1360( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1361( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1362( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1363( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1364( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1365( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1366( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1367( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1368( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned char, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1369( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1370( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1371( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1372( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1373( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1374( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1375( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1376( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1377( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1378( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1379( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1380( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( short, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1381( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1382( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1383( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1384( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1385( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1386( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1387( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1388( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1389( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1390( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1391( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1392( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned short, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1393( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1394( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1395( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1396( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1397( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1398( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1399( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1400( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1401( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1402( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1403( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1404( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1405( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1406( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1407( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1408( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1409( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1410( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1411( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1412( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1413( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1414( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1415( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1416( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( unsigned int, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1417( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1418( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1419( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1420( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1421( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1422( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1423( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1424( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1425( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1426( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1427( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1428( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( int64_t, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1429( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1430( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1431( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1432( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1433( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1434( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1435( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1436( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1437( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1438( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1439( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1440( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( uint64_t, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1441( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1442( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1443( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1444( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1445( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1446( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1447( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1448( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1449( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1450( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1451( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1452( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( float, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1453( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, const char* ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1454( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, bool ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1455( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1456( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, unsigned char ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1457( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1458( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, unsigned short ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1459( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1460( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, unsigned int ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1461( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, int64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1462( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, uint64_t ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1463( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, float ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1464( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< unsigned int(*)( double, double ) > > importedFunction( pFunction );
	unsigned int returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1465( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1466( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1467( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1468( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1469( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1470( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1471( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1472( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1473( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1474( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1475( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1476( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( const char*, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1477( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1478( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1479( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1480( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1481( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1482( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1483( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1484( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1485( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1486( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1487( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1488( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( bool, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1489( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1490( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1491( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1492( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1493( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1494( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1495( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1496( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1497( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1498( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1499( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1500( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( char, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1501( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1502( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1503( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1504( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1505( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1506( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1507( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1508( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1509( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1510( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1511( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1512( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned char, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1513( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1514( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1515( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1516( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1517( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1518( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1519( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1520( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1521( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1522( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1523( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1524( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( short, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1525( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1526( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1527( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1528( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1529( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1530( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1531( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1532( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1533( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1534( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1535( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1536( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned short, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1537( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1538( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1539( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1540( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1541( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1542( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1543( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1544( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1545( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1546( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1547( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1548( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1549( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1550( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1551( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1552( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1553( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1554( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1555( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1556( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1557( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1558( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1559( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1560( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( unsigned int, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1561( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1562( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1563( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1564( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1565( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1566( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1567( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1568( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1569( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1570( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1571( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1572( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( int64_t, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1573( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1574( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1575( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1576( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1577( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1578( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1579( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1580( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1581( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1582( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1583( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1584( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( uint64_t, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1585( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1586( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1587( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1588( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1589( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1590( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1591( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1592( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1593( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1594( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1595( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1596( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( float, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1597( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, const char* ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1598( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, bool ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1599( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1600( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, unsigned char ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1601( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1602( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, unsigned short ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1603( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1604( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, unsigned int ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1605( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, int64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1606( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, uint64_t ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1607( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, float ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1608( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< int64_t(*)( double, double ) > > importedFunction( pFunction );
	int64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1609( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1610( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1611( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1612( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1613( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1614( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1615( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1616( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1617( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1618( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1619( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1620( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( const char*, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1621( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1622( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1623( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1624( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1625( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1626( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1627( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1628( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1629( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1630( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1631( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1632( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( bool, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1633( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1634( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1635( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1636( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1637( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1638( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1639( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1640( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1641( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1642( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1643( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1644( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( char, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1645( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1646( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1647( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1648( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1649( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1650( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1651( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1652( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1653( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1654( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1655( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1656( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned char, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1657( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1658( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1659( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1660( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1661( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1662( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1663( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1664( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1665( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1666( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1667( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1668( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( short, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1669( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1670( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1671( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1672( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1673( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1674( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1675( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1676( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1677( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1678( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1679( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1680( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned short, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1681( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1682( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1683( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1684( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1685( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1686( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1687( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1688( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1689( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1690( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1691( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1692( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1693( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1694( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1695( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1696( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1697( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1698( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1699( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1700( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1701( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1702( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1703( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1704( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( unsigned int, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1705( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1706( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1707( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1708( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1709( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1710( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1711( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1712( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1713( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1714( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1715( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1716( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( int64_t, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1717( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1718( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1719( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1720( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1721( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1722( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1723( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1724( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1725( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1726( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1727( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1728( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( uint64_t, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1729( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1730( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1731( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1732( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1733( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1734( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1735( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1736( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1737( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1738( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1739( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1740( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( float, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1741( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, const char* ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1742( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, bool ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1743( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1744( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, unsigned char ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1745( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1746( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, unsigned short ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1747( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1748( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, unsigned int ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1749( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, int64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1750( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, uint64_t ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1751( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, float ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1752( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< uint64_t(*)( double, double ) > > importedFunction( pFunction );
	uint64_t returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1753( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1754( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1755( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1756( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1757( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1758( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1759( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1760( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1761( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1762( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1763( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1764( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( const char*, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1765( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1766( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1767( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1768( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1769( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1770( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1771( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1772( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1773( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1774( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1775( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1776( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( bool, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1777( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1778( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1779( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1780( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1781( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1782( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1783( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1784( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1785( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1786( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1787( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1788( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( char, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1789( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1790( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1791( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1792( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1793( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1794( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1795( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1796( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1797( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1798( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1799( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1800( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned char, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1801( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1802( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1803( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1804( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1805( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1806( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1807( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1808( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1809( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1810( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1811( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1812( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( short, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1813( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1814( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1815( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1816( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1817( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1818( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1819( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1820( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1821( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1822( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1823( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1824( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned short, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1825( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1826( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1827( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1828( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1829( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1830( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1831( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1832( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1833( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1834( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1835( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1836( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1837( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1838( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1839( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1840( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1841( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1842( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1843( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1844( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1845( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1846( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1847( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1848( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( unsigned int, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1849( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1850( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1851( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1852( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1853( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1854( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1855( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1856( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1857( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1858( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1859( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1860( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( int64_t, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1861( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1862( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1863( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1864( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1865( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1866( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1867( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1868( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1869( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1870( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1871( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1872( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( uint64_t, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1873( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1874( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1875( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1876( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1877( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1878( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1879( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1880( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1881( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1882( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1883( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1884( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( float, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1885( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, const char* ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1886( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, bool ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1887( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1888( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, unsigned char ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1889( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1890( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, unsigned short ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1891( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1892( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, unsigned int ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1893( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, int64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1894( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, uint64_t ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1895( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, float ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1896( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< float(*)( double, double ) > > importedFunction( pFunction );
	float returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1897( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1898( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1899( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1900( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1901( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1902( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1903( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1904( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1905( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1906( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1907( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1908( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( const char*, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< const char* >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1909( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1910( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1911( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1912( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1913( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1914( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1915( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1916( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1917( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1918( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1919( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1920( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( bool, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< bool >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1921( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1922( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1923( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1924( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1925( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1926( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1927( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1928( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1929( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1930( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1931( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1932( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( char, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1933( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1934( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1935( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1936( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1937( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1938( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1939( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1940( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1941( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1942( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1943( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1944( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned char, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned char >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1945( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1946( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1947( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1948( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1949( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1950( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1951( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1952( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1953( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1954( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1955( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1956( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( short, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1957( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1958( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1959( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1960( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1961( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1962( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1963( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1964( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1965( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1966( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1967( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1968( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned short, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned short >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1969( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1970( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1971( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1972( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1973( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1974( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1975( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1976( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1977( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1978( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1979( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1980( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1981( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1982( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1983( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1984( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1985( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1986( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1987( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1988( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1989( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1990( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1991( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1992( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( unsigned int, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< unsigned int >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1993( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1994( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1995( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1996( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1997( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1998( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_1999( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2000( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2001( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2002( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2003( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2004( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( int64_t, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< int64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2005( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2006( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2007( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2008( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2009( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2010( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2011( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2012( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2013( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2014( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2015( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2016( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( uint64_t, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< uint64_t >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2017( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2018( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2019( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2020( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2021( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2022( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2023( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2024( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2025( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2026( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2027( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2028( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( float, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< float >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2029( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, const char* ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< const char* >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2030( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, bool ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< bool >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2031( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2032( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, unsigned char ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned char >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2033( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2034( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, unsigned short ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned short >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2035( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2036( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, unsigned int ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< unsigned int >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2037( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, int64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< int64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2038( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, uint64_t ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< uint64_t >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2039( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, float ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< float >( 1 ) );
	handler.setReturn( returnedVal );
}

static void invoker_2040( const char* pFunction, ParamHandler& handler )
{
	if( handler.getParameterCount() != 2 )
	{
		handler.setReturn( "Invalid parameter count! 2 parameters required." );
		return;
	}
	binderoo::ImportedFunction< binderoo::FunctionTraits< double(*)( double, double ) > > importedFunction( pFunction );
	double returnedVal = importedFunction( handler.getParam< double >( 0 ), handler.getParam< double >( 1 ) );
	handler.setReturn( returnedVal );
}

static std::map< uint64_t, void(*)(const char*, ParamHandler&) > mapSignaturesToHandlers =
{
	{ 14174537562445187860ull, &invoker_0 },		//void()
	{ 5788640743624476297ull, &invoker_1 },		//const char*()
	{ 6149929728512697650ull, &invoker_2 },		//bool()
	{ 2728208320208101170ull, &invoker_3 },		//char()
	{ 9940910235546084473ull, &invoker_4 },		//unsigned char()
	{ 2796454079779935626ull, &invoker_5 },		//short()
	{ 10473795996994728967ull, &invoker_6 },		//unsigned short()
	{ 18014453000850597489ull, &invoker_7 },		//int()
	{ 13850487727918830768ull, &invoker_8 },		//unsigned int()
	{ 8665307813060580004ull, &invoker_9 },		//int64_t()
	{ 2062989057061594259ull, &invoker_10 },		//uint64_t()
	{ 10152307232575045274ull, &invoker_11 },		//float()
	{ 16614828178611398699ull, &invoker_12 },		//double()
	{ 16035914651092708381ull, &invoker_13 },		//void(const char*)
	{ 6063252504354197804ull, &invoker_14 },		//void(bool)
	{ 8372685432400437068ull, &invoker_15 },		//void(char)
	{ 15080340901922241389ull, &invoker_16 },		//void(unsigned char)
	{ 12238242462521995108ull, &invoker_17 },		//void(short)
	{ 11527467021013269047ull, &invoker_18 },		//void(unsigned short)
	{ 8731420387476669701ull, &invoker_19 },		//void(int)
	{ 17872377418387741398ull, &invoker_20 },		//void(unsigned int)
	{ 928513752139896930ull, &invoker_21 },		//void(int64_t)
	{ 1440705930082531243ull, &invoker_22 },		//void(uint64_t)
	{ 6173753574027584852ull, &invoker_23 },		//void(float)
	{ 13179344316005724675ull, &invoker_24 },		//void(double)
	{ 16997015030493342254ull, &invoker_25 },		//const char*(const char*)
	{ 3866438302173392365ull, &invoker_26 },		//const char*(bool)
	{ 12607906325976574037ull, &invoker_27 },		//const char*(char)
	{ 10952875372141873390ull, &invoker_28 },		//const char*(unsigned char)
	{ 11731572464004218847ull, &invoker_29 },		//const char*(short)
	{ 11201835317187412022ull, &invoker_30 },		//const char*(unsigned short)
	{ 13721117078960986014ull, &invoker_31 },		//const char*(int)
	{ 15921457138279036711ull, &invoker_32 },		//const char*(unsigned int)
	{ 7254649237670105465ull, &invoker_33 },		//const char*(int64_t)
	{ 12583911188879628906ull, &invoker_34 },		//const char*(uint64_t)
	{ 12617829501887923763ull, &invoker_35 },		//const char*(float)
	{ 4574269662437715210ull, &invoker_36 },		//const char*(double)
	{ 8192803864702282803ull, &invoker_37 },		//bool(const char*)
	{ 16685335515199792326ull, &invoker_38 },		//bool(bool)
	{ 5363027827637213594ull, &invoker_39 },		//bool(char)
	{ 12142996066245808087ull, &invoker_40 },		//bool(unsigned char)
	{ 10679717270501965130ull, &invoker_41 },		//bool(short)
	{ 5859816799596576329ull, &invoker_42 },		//bool(unsigned short)
	{ 18419676390733927499ull, &invoker_43 },		//bool(int)
	{ 7804686254755283024ull, &invoker_44 },		//bool(unsigned int)
	{ 17217619663362361120ull, &invoker_45 },		//bool(int64_t)
	{ 4876196926824605405ull, &invoker_46 },		//bool(uint64_t)
	{ 11247525606999228086ull, &invoker_47 },		//bool(float)
	{ 17772253878443509873ull, &invoker_48 },		//bool(double)
	{ 5029643820207172147ull, &invoker_49 },		//char(const char*)
	{ 8886656482700541638ull, &invoker_50 },		//char(bool)
	{ 16011092868847514522ull, &invoker_51 },		//char(char)
	{ 10395722760538471895ull, &invoker_52 },		//char(unsigned char)
	{ 4986590663844866890ull, &invoker_53 },		//char(short)
	{ 16717046480606046281ull, &invoker_54 },		//char(unsigned short)
	{ 12609768560809316939ull, &invoker_55 },		//char(int)
	{ 18289670833200142928ull, &invoker_56 },		//char(unsigned int)
	{ 14296298013059884320ull, &invoker_57 },		//char(int64_t)
	{ 8087985885114425565ull, &invoker_58 },		//char(uint64_t)
	{ 5554399000342129846ull, &invoker_59 },		//char(float)
	{ 10887033894929134193ull, &invoker_60 },		//char(double)
	{ 14472467738420258974ull, &invoker_61 },		//unsigned char(const char*)
	{ 3477755330778085853ull, &invoker_62 },		//unsigned char(bool)
	{ 18329479867943602533ull, &invoker_63 },		//unsigned char(char)
	{ 9164060003298278750ull, &invoker_64 },		//unsigned char(unsigned char)
	{ 15978784797281493967ull, &invoker_65 },		//unsigned char(short)
	{ 15279902508165198790ull, &invoker_66 },		//unsigned char(unsigned short)
	{ 7677355653050713358ull, &invoker_67 },		//unsigned char(int)
	{ 1535689347489370423ull, &invoker_68 },		//unsigned char(unsigned int)
	{ 15489477694522842985ull, &invoker_69 },		//unsigned char(int64_t)
	{ 4919977280735371866ull, &invoker_70 },		//unsigned char(uint64_t)
	{ 16714321391516656803ull, &invoker_71 },		//unsigned char(float)
	{ 13729679074318366042ull, &invoker_72 },		//unsigned char(double)
	{ 1334943529451211355ull, &invoker_73 },		//short(const char*)
	{ 6993656628120564654ull, &invoker_74 },		//short(bool)
	{ 4208009993867129090ull, &invoker_75 },		//short(char)
	{ 4690796765157591231ull, &invoker_76 },		//short(unsigned char)
	{ 10479584573399176082ull, &invoker_77 },		//short(short)
	{ 4164420150739302641ull, &invoker_78 },		//short(unsigned short)
	{ 14889482779447005971ull, &invoker_79 },		//short(int)
	{ 1444287161664717432ull, &invoker_80 },		//short(unsigned int)
	{ 10311919592751622264ull, &invoker_81 },		//short(int64_t)
	{ 4893184772683305765ull, &invoker_82 },		//short(uint64_t)
	{ 9860271139475135550ull, &invoker_83 },		//short(float)
	{ 6287734869588345577ull, &invoker_84 },		//short(double)
	{ 3024168185014815156ull, &invoker_85 },		//unsigned short(const char*)
	{ 1927255080445782943ull, &invoker_86 },		//unsigned short(bool)
	{ 13011787279138525931ull, &invoker_87 },		//unsigned short(char)
	{ 16019834557367134792ull, &invoker_88 },		//unsigned short(unsigned char)
	{ 12116586619272445733ull, &invoker_89 },		//unsigned short(short)
	{ 15091373135284827736ull, &invoker_90 },		//unsigned short(unsigned short)
	{ 5498912550754014476ull, &invoker_91 },		//unsigned short(int)
	{ 7561724560928003177ull, &invoker_92 },		//unsigned short(unsigned int)
	{ 2947065885004140543ull, &invoker_93 },		//unsigned short(int64_t)
	{ 9205851854031980708ull, &invoker_94 },		//unsigned short(uint64_t)
	{ 10384147478416857981ull, &invoker_95 },		//unsigned short(float)
	{ 17937527553443124512ull, &invoker_96 },		//unsigned short(double)
	{ 657646455382906790ull, &invoker_97 },		//int(const char*)
	{ 2327475578806786085ull, &invoker_98 },		//int(bool)
	{ 18017839494020266861ull, &invoker_99 },		//int(char)
	{ 7646146316103348038ull, &invoker_100 },		//int(unsigned char)
	{ 1994408299052808759ull, &invoker_101 },		//int(short)
	{ 967237849613211502ull, &invoker_102 },		//int(unsigned short)
	{ 3898383373762452182ull, &invoker_103 },		//int(int)
	{ 9561746895127328991ull, &invoker_104 },		//int(unsigned int)
	{ 6205304411090934977ull, &invoker_105 },		//int(int64_t)
	{ 13015342700236174210ull, &invoker_106 },		//int(uint64_t)
	{ 11012448304227239243ull, &invoker_107 },		//int(float)
	{ 14642120194032475186ull, &invoker_108 },		//int(double)
	{ 2056938330592797257ull, &invoker_109 },		//unsigned int(const char*)
	{ 9343009444517335744ull, &invoker_110 },		//unsigned int(bool)
	{ 7067391985140931576ull, &invoker_111 },		//unsigned int(char)
	{ 4947260841043958145ull, &invoker_112 },		//unsigned int(unsigned char)
	{ 12492108521860599592ull, &invoker_113 },		//unsigned int(short)
	{ 684941124320000835ull, &invoker_114 },		//unsigned int(unsigned short)
	{ 11452215624001722425ull, &invoker_115 },		//unsigned int(int)
	{ 6929834677462411378ull, &invoker_116 },		//unsigned int(unsigned int)
	{ 12938541086921284822ull, &invoker_117 },		//unsigned int(int64_t)
	{ 16895083127245599823ull, &invoker_118 },		//unsigned int(uint64_t)
	{ 11692613161304612344ull, &invoker_119 },		//unsigned int(float)
	{ 14196735282143630823ull, &invoker_120 },		//unsigned int(double)
	{ 15384875551980626157ull, &invoker_121 },		//int64_t(const char*)
	{ 3660001766203690172ull, &invoker_122 },		//int64_t(bool)
	{ 8957223500153912252ull, &invoker_123 },		//int64_t(char)
	{ 8893220795142019453ull, &invoker_124 },		//int64_t(unsigned char)
	{ 5916495091083522292ull, &invoker_125 },		//int64_t(short)
	{ 12506218865671703783ull, &invoker_126 },		//int64_t(unsigned short)
	{ 12297058362144247381ull, &invoker_127 },		//int64_t(int)
	{ 2149265049082631878ull, &invoker_128 },		//int64_t(unsigned int)
	{ 18149037915526083698ull, &invoker_129 },		//int64_t(int64_t)
	{ 4552832370428231291ull, &invoker_130 },		//int64_t(uint64_t)
	{ 3263511097123391332ull, &invoker_131 },		//int64_t(float)
	{ 17552693670965964915ull, &invoker_132 },		//int64_t(double)
	{ 11737706173817811600ull, &invoker_133 },		//uint64_t(const char*)
	{ 16462726111716807267ull, &invoker_134 },		//uint64_t(bool)
	{ 7504707650502057671ull, &invoker_135 },		//uint64_t(char)
	{ 7187499453888656908ull, &invoker_136 },		//uint64_t(unsigned char)
	{ 9043286722300498457ull, &invoker_137 },		//uint64_t(short)
	{ 7806817393190184484ull, &invoker_138 },		//uint64_t(unsigned short)
	{ 6722039864612568032ull, &invoker_139 },		//uint64_t(int)
	{ 12136187425152369861ull, &invoker_140 },		//uint64_t(unsigned int)
	{ 9903911096936441651ull, &invoker_141 },		//uint64_t(int64_t)
	{ 17356419905046490616ull, &invoker_142 },		//uint64_t(uint64_t)
	{ 1990560994645507009ull, &invoker_143 },		//uint64_t(float)
	{ 545748900664941396ull, &invoker_144 },		//uint64_t(double)
	{ 15065599966376753387ull, &invoker_145 },		//float(const char*)
	{ 4868815705621313278ull, &invoker_146 },		//float(bool)
	{ 17734085690109233906ull, &invoker_147 },		//float(char)
	{ 7102235039929693583ull, &invoker_148 },		//float(unsigned char)
	{ 12305943940752844066ull, &invoker_149 },		//float(short)
	{ 7319184986592878817ull, &invoker_150 },		//float(unsigned short)
	{ 11963896472700568739ull, &invoker_151 },		//float(int)
	{ 15974115938467700904ull, &invoker_152 },		//float(unsigned int)
	{ 10309142423882201800ull, &invoker_153 },		//float(int64_t)
	{ 13845774392608079733ull, &invoker_154 },		//float(uint64_t)
	{ 11723576657552150350ull, &invoker_155 },		//float(float)
	{ 8211108340054295193ull, &invoker_156 },		//float(double)
	{ 10042254769461882680ull, &invoker_157 },		//double(const char*)
	{ 4787243412275955595ull, &invoker_158 },		//double(bool)
	{ 18056724487961690671ull, &invoker_159 },		//double(char)
	{ 11104728825060680692ull, &invoker_160 },		//double(unsigned char)
	{ 8196383523261999745ull, &invoker_161 },		//double(short)
	{ 5593468299979900652ull, &invoker_162 },		//double(unsigned short)
	{ 15535489463642083784ull, &invoker_163 },		//double(int)
	{ 10690356332401540109ull, &invoker_164 },		//double(unsigned int)
	{ 5224505506957384555ull, &invoker_165 },		//double(int64_t)
	{ 5326014775568141824ull, &invoker_166 },		//double(uint64_t)
	{ 7806742799369801865ull, &invoker_167 },		//double(float)
	{ 5560993555078887596ull, &invoker_168 },		//double(double)
	{ 15235156005387949710ull, &invoker_169 },		//void(const char*, const char*)
	{ 1328902432946205005ull, &invoker_170 },		//void(const char*, bool)
	{ 10070370456749386677ull, &invoker_171 },		//void(const char*, char)
	{ 10844700809674782670ull, &invoker_172 },		//void(const char*, unsigned char)
	{ 12889539132595326783ull, &invoker_173 },		//void(const char*, short)
	{ 2341058266828794902ull, &invoker_174 },		//void(const char*, unsigned short)
	{ 5071089663630490878ull, &invoker_175 },		//void(const char*, int)
	{ 3245614969330784263ull, &invoker_176 },		//void(const char*, unsigned int)
	{ 12296829153544784921ull, &invoker_177 },		//void(const char*, int64_t)
	{ 14442324801555687178ull, &invoker_178 },		//void(const char*, uint64_t)
	{ 1173974007963012115ull, &invoker_179 },		//void(const char*, float)
	{ 12235335965148423530ull, &invoker_180 },		//void(const char*, double)
	{ 14363979344099070297ull, &invoker_181 },		//void(bool, const char*)
	{ 14661975898147984464ull, &invoker_182 },		//void(bool, bool)
	{ 2623056209989227176ull, &invoker_183 },		//void(bool, char)
	{ 14999664089476437329ull, &invoker_184 },		//void(bool, unsigned char)
	{ 2127836300013738808ull, &invoker_185 },		//void(bool, short)
	{ 17493500837888601907ull, &invoker_186 },		//void(bool, unsigned short)
	{ 10081414435430154441ull, &invoker_187 },		//void(bool, int)
	{ 249800295552308066ull, &invoker_188 },		//void(bool, unsigned int)
	{ 2878852482165347942ull, &invoker_189 },		//void(bool, int64_t)
	{ 12543556316567984671ull, &invoker_190 },		//void(bool, uint64_t)
	{ 17096925504209749128ull, &invoker_191 },		//void(bool, float)
	{ 10482110018149588311ull, &invoker_192 },		//void(bool, double)
	{ 6418634299532633721ull, &invoker_193 },		//void(char, const char*)
	{ 1348009340511537264ull, &invoker_194 },		//void(char, bool)
	{ 14374145666026130120ull, &invoker_195 },		//void(char, char)
	{ 6933779014749644913ull, &invoker_196 },		//void(char, unsigned char)
	{ 15190107699542863832ull, &invoker_197 },		//void(char, short)
	{ 3504749605534762579ull, &invoker_198 },		//void(char, unsigned short)
	{ 14643420043629556201ull, &invoker_199 },		//void(char, int)
	{ 17696990088192157826ull, &invoker_200 },		//void(char, unsigned int)
	{ 2643830255030573638ull, &invoker_201 },		//void(char, int64_t)
	{ 12234401595048828287ull, &invoker_202 },		//void(char, uint64_t)
	{ 17557374741222854568ull, &invoker_203 },		//void(char, float)
	{ 12888903095377954295ull, &invoker_204 },		//void(char, double)
	{ 13777806973060561310ull, &invoker_205 },		//void(unsigned char, const char*)
	{ 12693203794459540701ull, &invoker_206 },		//void(unsigned char, bool)
	{ 9098184257915505765ull, &invoker_207 },		//void(unsigned char, char)
	{ 9643626036113225310ull, &invoker_208 },		//void(unsigned char, unsigned char)
	{ 15343121059296197839ull, &invoker_209 },		//void(unsigned char, short)
	{ 7662331148517723846ull, &invoker_210 },		//void(unsigned char, unsigned short)
	{ 4815335463536178702ull, &invoker_211 },		//void(unsigned char, int)
	{ 671870960220632119ull, &invoker_212 },		//void(unsigned char, unsigned int)
	{ 1400496343589838953ull, &invoker_213 },		//void(unsigned char, int64_t)
	{ 10404293954622592346ull, &invoker_214 },		//void(unsigned char, uint64_t)
	{ 16078657653531360675ull, &invoker_215 },		//void(unsigned char, float)
	{ 10033040952727482458ull, &invoker_216 },		//void(unsigned char, double)
	{ 5549182657831414961ull, &invoker_217 },		//void(short, const char*)
	{ 6475804452217451432ull, &invoker_218 },		//void(short, bool)
	{ 15588753661215469344ull, &invoker_219 },		//void(short, char)
	{ 11850440295841039497ull, &invoker_220 },		//void(short, unsigned char)
	{ 2875376223440115824ull, &invoker_221 },		//void(short, short)
	{ 15899476698047596811ull, &invoker_222 },		//void(short, unsigned short)
	{ 6078588458221872865ull, &invoker_223 },		//void(short, int)
	{ 14620272545897055514ull, &invoker_224 },		//void(short, unsigned int)
	{ 10519213480364327854ull, &invoker_225 },		//void(short, int64_t)
	{ 6189555155447989047ull, &invoker_226 },		//void(short, uint64_t)
	{ 17636457979828555136ull, &invoker_227 },		//void(short, float)
	{ 2317423716818449983ull, &invoker_228 },		//void(short, double)
	{ 16518497562872989904ull, &invoker_229 },		//void(unsigned short, const char*)
	{ 3235465351353827747ull, &invoker_230 },		//void(unsigned short, bool)
	{ 6105879023884831239ull, &invoker_231 },		//void(unsigned short, char)
	{ 1920786671921295820ull, &invoker_232 },		//void(unsigned short, unsigned char)
	{ 5941919375840291929ull, &invoker_233 },		//void(unsigned short, short)
	{ 6942485962632175332ull, &invoker_234 },		//void(unsigned short, unsigned short)
	{ 11558858053993690144ull, &invoker_235 },		//void(unsigned short, int)
	{ 8387295390531741829ull, &invoker_236 },		//void(unsigned short, unsigned int)
	{ 11787580973344845171ull, &invoker_237 },		//void(unsigned short, int64_t)
	{ 15117978845906398776ull, &invoker_238 },		//void(unsigned short, uint64_t)
	{ 18109468488153529601ull, &invoker_239 },		//void(unsigned short, float)
	{ 9296998073129193108ull, &invoker_240 },		//void(unsigned short, double)
	{ 914795536535345078ull, &invoker_241 },		//void(int, const char*)
	{ 6700735382016763125ull, &invoker_242 },		//void(int, bool)
	{ 633934891936018269ull, &invoker_243 },		//void(int, char)
	{ 4672939814531240726ull, &invoker_244 },		//void(int, unsigned char)
	{ 17108248218437323719ull, &invoker_245 },		//void(int, short)
	{ 8745022473301413726ull, &invoker_246 },		//void(int, unsigned short)
	{ 14191562386788179878ull, &invoker_247 },		//void(int, int)
	{ 18168522928411951503ull, &invoker_248 },		//void(int, unsigned int)
	{ 2519031503789949969ull, &invoker_249 },		//void(int, int64_t)
	{ 14207808492585311186ull, &invoker_250 },		//void(int, uint64_t)
	{ 10279727707081781019ull, &invoker_251 },		//void(int, float)
	{ 1399823737670602594ull, &invoker_252 },		//void(int, double)
	{ 7215100290362175827ull, &invoker_253 },		//void(unsigned int, const char*)
	{ 5357260543962125798ull, &invoker_254 },		//void(unsigned int, bool)
	{ 12481696930109098682ull, &invoker_255 },		//void(unsigned int, char)
	{ 735163754164493431ull, &invoker_256 },		//void(unsigned int, unsigned char)
	{ 8741031362314526570ull, &invoker_257 },		//void(unsigned int, short)
	{ 15260916528139570793ull, &invoker_258 },		//void(unsigned int, unsigned short)
	{ 10918549926419534699ull, &invoker_259 },		//void(unsigned int, int)
	{ 13193596096362894576ull, &invoker_260 },		//void(unsigned int, unsigned int)
	{ 17376047294535169152ull, &invoker_261 },		//void(unsigned int, int64_t)
	{ 9467253458979354557ull, &invoker_262 },		//void(unsigned int, uint64_t)
	{ 15927010901287177046ull, &invoker_263 },		//void(unsigned int, float)
	{ 5031947119442050833ull, &invoker_264 },		//void(unsigned int, double)
	{ 2970394598413499895ull, &invoker_265 },		//void(int64_t, const char*)
	{ 15609571056643156754ull, &invoker_266 },		//void(int64_t, bool)
	{ 6181776680836442270ull, &invoker_267 },		//void(int64_t, char)
	{ 3163682930525714291ull, &invoker_268 },		//void(int64_t, unsigned char)
	{ 16650580411361786374ull, &invoker_269 },		//void(int64_t, short)
	{ 9025030623674333709ull, &invoker_270 },		//void(int64_t, unsigned short)
	{ 18151631859902574711ull, &invoker_271 },		//void(int64_t, int)
	{ 13386328870498751220ull, &invoker_272 },		//void(int64_t, unsigned int)
	{ 17880987928053063644ull, &invoker_273 },		//void(int64_t, int64_t)
	{ 9344456094120330361ull, &invoker_274 },		//void(int64_t, uint64_t)
	{ 11243376000204588130ull, &invoker_275 },		//void(int64_t, float)
	{ 9197276513377980013ull, &invoker_276 },		//void(int64_t, double)
	{ 1271664844245075516ull, &invoker_277 },		//void(uint64_t, const char*)
	{ 6905701108151910983ull, &invoker_278 },		//void(uint64_t, bool)
	{ 3572495313591522803ull, &invoker_279 },		//void(uint64_t, char)
	{ 10828209916684123824ull, &invoker_280 },		//void(uint64_t, unsigned char)
	{ 10109724069053484429ull, &invoker_281 },		//void(uint64_t, short)
	{ 15192765570081958112ull, &invoker_282 },		//void(uint64_t, unsigned short)
	{ 7059426805838150260ull, &invoker_283 },		//void(uint64_t, int)
	{ 1965708029311365777ull, &invoker_284 },		//void(uint64_t, unsigned int)
	{ 5612212358057162615ull, &invoker_285 },		//void(uint64_t, int64_t)
	{ 12973217243756401868ull, &invoker_286 },		//void(uint64_t, uint64_t)
	{ 1776006032046437445ull, &invoker_287 },		//void(uint64_t, float)
	{ 10856736020514129208ull, &invoker_288 },		//void(uint64_t, double)
	{ 15960206361561015777ull, &invoker_289 },		//void(float, const char*)
	{ 2455224036592382232ull, &invoker_290 },		//void(float, bool)
	{ 5649807714419647024ull, &invoker_291 },		//void(float, char)
	{ 5733619909114239225ull, &invoker_292 },		//void(float, unsigned char)
	{ 11713468254042962784ull, &invoker_293 },		//void(float, short)
	{ 17803864350972254811ull, &invoker_294 },		//void(float, unsigned short)
	{ 4149190384699277585ull, &invoker_295 },		//void(float, int)
	{ 9692307979392581226ull, &invoker_296 },		//void(float, unsigned int)
	{ 6651925878296871902ull, &invoker_297 },		//void(float, int64_t)
	{ 1529107738122556967ull, &invoker_298 },		//void(float, uint64_t)
	{ 17105800987084530032ull, &invoker_299 },		//void(float, float)
	{ 7501841175392171215ull, &invoker_300 },		//void(float, double)
	{ 3654765579194198580ull, &invoker_301 },		//void(double, const char*)
	{ 15609990767631693087ull, &invoker_302 },		//void(double, bool)
	{ 8247778892614884459ull, &invoker_303 },		//void(double, char)
	{ 4064874942905654984ull, &invoker_304 },		//void(double, unsigned char)
	{ 10909023527420339109ull, &invoker_305 },		//void(double, short)
	{ 14500804847264656344ull, &invoker_306 },		//void(double, unsigned short)
	{ 12430285192150361484ull, &invoker_307 },		//void(double, int)
	{ 11610718127944682985ull, &invoker_308 },		//void(double, unsigned int)
	{ 2039264202296502399ull, &invoker_309 },		//void(double, int64_t)
	{ 14779094878923303460ull, &invoker_310 },		//void(double, uint64_t)
	{ 9176584386564751357ull, &invoker_311 },		//void(double, float)
	{ 14372851667534420640ull, &invoker_312 },		//void(double, double)
	{ 15022623106481818667ull, &invoker_313 },		//const char*(const char*, const char*)
	{ 10306673698153098558ull, &invoker_314 },		//const char*(const char*, bool)
	{ 16553631742677220658ull, &invoker_315 },		//const char*(const char*, char)
	{ 6150522906126499663ull, &invoker_316 },		//const char*(const char*, unsigned char)
	{ 14422797880423049314ull, &invoker_317 },		//const char*(const char*, short)
	{ 16149337746481605025ull, &invoker_318 },		//const char*(const char*, unsigned short)
	{ 1161108769196589795ull, &invoker_319 },		//const char*(const char*, int)
	{ 2692457178359512424ull, &invoker_320 },		//const char*(const char*, unsigned int)
	{ 12403026223129650952ull, &invoker_321 },		//const char*(const char*, int64_t)
	{ 4885276585535245237ull, &invoker_322 },		//const char*(const char*, uint64_t)
	{ 1132454253766723726ull, &invoker_323 },		//const char*(const char*, float)
	{ 8508341889769558233ull, &invoker_324 },		//const char*(const char*, double)
	{ 456416950988337438ull, &invoker_325 },		//const char*(bool, const char*)
	{ 11752364209369168733ull, &invoker_326 },		//const char*(bool, bool)
	{ 8157344672825133797ull, &invoker_327 },		//const char*(bool, char)
	{ 3475562939878709726ull, &invoker_328 },		//const char*(bool, unsigned char)
	{ 13058770458736308303ull, &invoker_329 },		//const char*(bool, short)
	{ 13087753398796411206ull, &invoker_330 },		//const char*(bool, unsigned short)
	{ 5711692828623109518ull, &invoker_331 },		//const char*(bool, int)
	{ 15706496513045349047ull, &invoker_332 },		//const char*(bool, unsigned int)
	{ 16252216902793420777ull, &invoker_333 },		//const char*(bool, int64_t)
	{ 8921678337390885850ull, &invoker_334 },		//const char*(bool, uint64_t)
	{ 13794307052971471139ull, &invoker_335 },		//const char*(bool, float)
	{ 15739811781008159450ull, &invoker_336 },		//const char*(bool, double)
	{ 5437447568448223686ull, &invoker_337 },		//const char*(char, const char*)
	{ 18106483778282129093ull, &invoker_338 },		//const char*(char, bool)
	{ 15350103619786058253ull, &invoker_339 },		//const char*(char, char)
	{ 14156021344178554470ull, &invoker_340 },		//const char*(char, unsigned char)
	{ 10690377191147296215ull, &invoker_341 },		//const char*(char, short)
	{ 3193837460044976014ull, &invoker_342 },		//const char*(char, unsigned short)
	{ 12726286901149950966ull, &invoker_343 },		//const char*(char, int)
	{ 13441983872822075519ull, &invoker_344 },		//const char*(char, unsigned int)
	{ 4417351604824533921ull, &invoker_345 },		//const char*(char, int64_t)
	{ 12719178886744176866ull, &invoker_346 },		//const char*(char, uint64_t)
	{ 488283093841908587ull, &invoker_347 },		//const char*(char, float)
	{ 7779984476880234962ull, &invoker_348 },		//const char*(char, double)
	{ 14572214059570571499ull, &invoker_349 },		//const char*(unsigned char, const char*)
	{ 14465499468904810238ull, &invoker_350 },		//const char*(unsigned char, bool)
	{ 8884025379683179250ull, &invoker_351 },		//const char*(unsigned char, char)
	{ 8521490803240019343ull, &invoker_352 },		//const char*(unsigned char, unsigned char)
	{ 4464982622269166882ull, &invoker_353 },		//const char*(unsigned char, short)
	{ 7427573499557032161ull, &invoker_354 },		//const char*(unsigned char, unsigned short)
	{ 4046008140605027491ull, &invoker_355 },		//const char*(unsigned char, int)
	{ 15952272321610084520ull, &invoker_356 },		//const char*(unsigned char, unsigned int)
	{ 6590927880639720136ull, &invoker_357 },		//const char*(unsigned char, int64_t)
	{ 7571703975041388405ull, &invoker_358 },		//const char*(unsigned char, uint64_t)
	{ 3882615339068473166ull, &invoker_359 },		//const char*(unsigned char, float)
	{ 13765065327757169305ull, &invoker_360 },		//const char*(unsigned char, double)
	{ 6120917162228763896ull, &invoker_361 },		//const char*(short, const char*)
	{ 2538579409167366731ull, &invoker_362 },		//const char*(short, bool)
	{ 3350822419449061615ull, &invoker_363 },		//const char*(short, char)
	{ 8475773372305572916ull, &invoker_364 },		//const char*(short, unsigned char)
	{ 11431392476865946689ull, &invoker_365 },		//const char*(short, short)
	{ 3381987601556365356ull, &invoker_366 },		//const char*(short, unsigned short)
	{ 12089780486030804360ull, &invoker_367 },		//const char*(short, int)
	{ 12123626799929336141ull, &invoker_368 },		//const char*(short, unsigned int)
	{ 13153991925316485419ull, &invoker_369 },		//const char*(short, int64_t)
	{ 16567532157901030336ull, &invoker_370 },		//const char*(short, uint64_t)
	{ 17137101518981110089ull, &invoker_371 },		//const char*(short, float)
	{ 892185379719366764ull, &invoker_372 },		//const char*(short, double)
	{ 11641809534074374195ull, &invoker_373 },		//const char*(unsigned short, const char*)
	{ 18292005469162322118ull, &invoker_374 },		//const char*(unsigned short, bool)
	{ 6969697781599743386ull, &invoker_375 },		//const char*(unsigned short, char)
	{ 17885455443445271511ull, &invoker_376 },		//const char*(unsigned short, unsigned char)
	{ 12843885592501942602ull, &invoker_377 },		//const char*(unsigned short, short)
	{ 15085322700991787593ull, &invoker_378 },		//const char*(unsigned short, unsigned short)
	{ 2493198458811330635ull, &invoker_379 },		//const char*(unsigned short, int)
	{ 18213176207236486224ull, &invoker_380 },		//const char*(unsigned short, unsigned int)
	{ 10784393843792028448ull, &invoker_381 },		//const char*(unsigned short, int64_t)
	{ 3670618468421303005ull, &invoker_382 },		//const char*(unsigned short, uint64_t)
	{ 13411693928999205558ull, &invoker_383 },		//const char*(unsigned short, float)
	{ 17697838747469937777ull, &invoker_384 },		//const char*(unsigned short, double)
	{ 16414966247137569051ull, &invoker_385 },		//const char*(int, const char*)
	{ 17611372082814982510ull, &invoker_386 },		//const char*(int, bool)
	{ 14825725448561546946ull, &invoker_387 },		//const char*(int, char)
	{ 16503566236671882751ull, &invoker_388 },		//const char*(int, unsigned char)
	{ 3143659498551254610ull, &invoker_389 },		//const char*(int, short)
	{ 6039060227813474097ull, &invoker_390 },		//const char*(int, unsigned short)
	{ 5764980900680490195ull, &invoker_391 },		//const char*(int, int)
	{ 5594552331489713080ull, &invoker_392 },		//const char*(int, unsigned int)
	{ 6289316507537043256ull, &invoker_393 },		//const char*(int, int64_t)
	{ 1907872703955120101ull, &invoker_394 },		//const char*(int, uint64_t)
	{ 8369127238332335102ull, &invoker_395 },		//const char*(int, float)
	{ 16880302773910515369ull, &invoker_396 },		//const char*(int, double)
	{ 2800512126999251328ull, &invoker_397 },		//const char*(unsigned int, const char*)
	{ 14938772497403359507ull, &invoker_398 },		//const char*(unsigned int, bool)
	{ 2390620238051802455ull, &invoker_399 },		//const char*(unsigned int, char)
	{ 13890935176296186812ull, &invoker_400 },		//const char*(unsigned int, unsigned char)
	{ 13528020605124644553ull, &invoker_401 },		//const char*(unsigned int, short)
	{ 5937959585650477300ull, &invoker_402 },		//const char*(unsigned int, unsigned short)
	{ 902073525023448272ull, &invoker_403 },		//const char*(unsigned int, int)
	{ 3413247426123621973ull, &invoker_404 },		//const char*(unsigned int, unsigned int)
	{ 1410763998876912355ull, &invoker_405 },		//const char*(unsigned int, int64_t)
	{ 4897612909578571752ull, &invoker_406 },		//const char*(unsigned int, uint64_t)
	{ 12832367067537193265ull, &invoker_407 },		//const char*(unsigned int, float)
	{ 12210074315807203812ull, &invoker_408 },		//const char*(unsigned int, double)
	{ 15950116588773507634ull, &invoker_409 },		//const char*(int64_t, const char*)
	{ 9493035990204438185ull, &invoker_410 },		//const char*(int64_t, bool)
	{ 7603122145969226025ull, &invoker_411 },		//const char*(int64_t, char)
	{ 4620477856649155210ull, &invoker_412 },		//const char*(int64_t, unsigned char)
	{ 15420999259553794859ull, &invoker_413 },		//const char*(int64_t, short)
	{ 17135470314946057562ull, &invoker_414 },		//const char*(int64_t, unsigned short)
	{ 3031275204046328506ull, &invoker_415 },		//const char*(int64_t, int)
	{ 1685635576518531355ull, &invoker_416 },		//const char*(int64_t, unsigned int)
	{ 8351900333577418565ull, &invoker_417 },		//const char*(int64_t, int64_t)
	{ 2384234403963374582ull, &invoker_418 },		//const char*(int64_t, uint64_t)
	{ 7407514037987658735ull, &invoker_419 },		//const char*(int64_t, float)
	{ 167122652493622390ull, &invoker_420 },		//const char*(int64_t, double)
	{ 2920684574747498175ull, &invoker_421 },		//const char*(uint64_t, const char*)
	{ 14356176901616450266ull, &invoker_422 },		//const char*(uint64_t, bool)
	{ 1159096053750795878ull, &invoker_423 },		//const char*(uint64_t, char)
	{ 8726258359436257819ull, &invoker_424 },		//const char*(uint64_t, unsigned char)
	{ 8306519714811897742ull, &invoker_425 },		//const char*(uint64_t, short)
	{ 16185384656891815029ull, &invoker_426 },		//const char*(uint64_t, unsigned short)
	{ 13423437354435246207ull, &invoker_427 },		//const char*(uint64_t, int)
	{ 3999251628687494876ull, &invoker_428 },		//const char*(uint64_t, unsigned int)
	{ 3064502573593914772ull, &invoker_429 },		//const char*(uint64_t, int64_t)
	{ 12756698096558330401ull, &invoker_430 },		//const char*(uint64_t, uint64_t)
	{ 9531411404619563018ull, &invoker_431 },		//const char*(uint64_t, float)
	{ 14479411271244330021ull, &invoker_432 },		//const char*(uint64_t, double)
	{ 15089077476987006308ull, &invoker_433 },		//const char*(float, const char*)
	{ 5334669044765270479ull, &invoker_434 },		//const char*(float, bool)
	{ 7197023199461806907ull, &invoker_435 },		//const char*(float, char)
	{ 9133788788008856568ull, &invoker_436 },		//const char*(float, unsigned char)
	{ 14704589764493412117ull, &invoker_437 },		//const char*(float, short)
	{ 6479955440736321320ull, &invoker_438 },		//const char*(float, unsigned short)
	{ 7973458074961348220ull, &invoker_439 },		//const char*(float, int)
	{ 6384494406005344313ull, &invoker_440 },		//const char*(float, unsigned int)
	{ 16300479477180981743ull, &invoker_441 },		//const char*(float, int64_t)
	{ 16999500824430649364ull, &invoker_442 },		//const char*(float, uint64_t)
	{ 9890783085978306477ull, &invoker_443 },		//const char*(float, float)
	{ 13267030605181248944ull, &invoker_444 },		//const char*(float, double)
	{ 8256090240101547359ull, &invoker_445 },		//const char*(double, const char*)
	{ 9355564591046854522ull, &invoker_446 },		//const char*(double, bool)
	{ 2148130488975122566ull, &invoker_447 },		//const char*(double, char)
	{ 8177106837590080955ull, &invoker_448 },		//const char*(double, unsigned char)
	{ 17368552425586913966ull, &invoker_449 },		//const char*(double, short)
	{ 13228984835115187861ull, &invoker_450 },		//const char*(double, unsigned short)
	{ 10687069556019095327ull, &invoker_451 },		//const char*(double, int)
	{ 7046885453595783676ull, &invoker_452 },		//const char*(double, unsigned int)
	{ 16226737355819447028ull, &invoker_453 },		//const char*(double, int64_t)
	{ 14109366399785271297ull, &invoker_454 },		//const char*(double, uint64_t)
	{ 18209662151011415466ull, &invoker_455 },		//const char*(double, float)
	{ 3603406097623713861ull, &invoker_456 },		//const char*(double, double)
	{ 17259106522890624868ull, &invoker_457 },		//bool(const char*, const char*)
	{ 13362721563626936271ull, &invoker_458 },		//bool(const char*, bool)
	{ 15225075718323472699ull, &invoker_459 },		//bool(const char*, char)
	{ 388925484886650360ull, &invoker_460 },		//bool(const char*, unsigned char)
	{ 726210022053415189ull, &invoker_461 },		//bool(const char*, short)
	{ 3449023837700220200ull, &invoker_462 },		//bool(const char*, unsigned short)
	{ 16197004705422751868ull, &invoker_463 },		//bool(const char*, int)
	{ 16296626007764598329ull, &invoker_464 },		//bool(const char*, unsigned int)
	{ 8125519889901433839ull, &invoker_465 },		//bool(const char*, int64_t)
	{ 3194426616416990740ull, &invoker_466 },		//bool(const char*, uint64_t)
	{ 14359147417247861165ull, &invoker_467 },		//bool(const char*, float)
	{ 8064331713554074544ull, &invoker_468 },		//bool(const char*, double)
	{ 7992916588311006851ull, &invoker_469 },		//bool(bool, const char*)
	{ 764828516967103894ull, &invoker_470 },		//bool(bool, bool)
	{ 1778938021007536266ull, &invoker_471 },		//bool(bool, char)
	{ 3023044127728941223ull, &invoker_472 },		//bool(bool, unsigned char)
	{ 7025962224430075738ull, &invoker_473 },		//bool(bool, short)
	{ 1251688694117547641ull, &invoker_474 },		//bool(bool, unsigned short)
	{ 6026923676121613083ull, &invoker_475 },		//bool(bool, int)
	{ 16536465874510586816ull, &invoker_476 },		//bool(bool, unsigned int)
	{ 11209894178923000496ull, &invoker_477 },		//bool(bool, int64_t)
	{ 10876983612907130477ull, &invoker_478 },		//bool(bool, uint64_t)
	{ 1568808324855255814ull, &invoker_479 },		//bool(bool, float)
	{ 9698540269715990049ull, &invoker_480 },		//bool(bool, double)
	{ 15659215175137190703ull, &invoker_481 },		//bool(char, const char*)
	{ 10948083875289944778ull, &invoker_482 },		//bool(char, bool)
	{ 10471483658387287286ull, &invoker_483 },		//bool(char, char)
	{ 9373876828808215115ull, &invoker_484 },		//bool(char, unsigned char)
	{ 1923996717356271166ull, &invoker_485 },		//bool(char, short)
	{ 17725868673809169029ull, &invoker_486 },		//bool(char, unsigned short)
	{ 2568922471009504623ull, &invoker_487 },		//bool(char, int)
	{ 7176939182673595244ull, &invoker_488 },		//bool(char, unsigned int)
	{ 16209732740407740356ull, &invoker_489 },		//bool(char, int64_t)
	{ 8221747270529484625ull, &invoker_490 },		//bool(char, uint64_t)
	{ 5706027641857016314ull, &invoker_491 },		//bool(char, float)
	{ 514970624633083445ull, &invoker_492 },		//bool(char, double)
	{ 12920866061031717744ull, &invoker_493 },		//bool(unsigned char, const char*)
	{ 17860449858456984387ull, &invoker_494 },		//bool(unsigned char, bool)
	{ 2284119457278436263ull, &invoker_495 },		//bool(unsigned char, char)
	{ 7620511599185268972ull, &invoker_496 },		//bool(unsigned char, unsigned char)
	{ 12323313761655426937ull, &invoker_497 },		//bool(unsigned char, short)
	{ 8644847122252283268ull, &invoker_498 },		//bool(unsigned char, unsigned short)
	{ 13847862070284848320ull, &invoker_499 },		//bool(unsigned char, int)
	{ 2128856595991054757ull, &invoker_500 },		//bool(unsigned char, unsigned int)
	{ 2758298812075461075ull, &invoker_501 },		//bool(unsigned char, int64_t)
	{ 1834873328084147480ull, &invoker_502 },		//bool(unsigned char, uint64_t)
	{ 5660055360899127201ull, &invoker_503 },		//bool(unsigned char, float)
	{ 2617486154379994932ull, &invoker_504 },		//bool(unsigned char, double)
	{ 9942601936755299487ull, &invoker_505 },		//bool(short, const char*)
	{ 15462660960140972730ull, &invoker_506 },		//bool(short, bool)
	{ 2265720849763729350ull, &invoker_507 },		//bool(short, char)
	{ 4146906642744976251ull, &invoker_508 },		//bool(short, unsigned char)
	{ 9888629138616197358ull, &invoker_509 },		//bool(short, short)
	{ 4062090236979875669ull, &invoker_510 },		//bool(short, unsigned short)
	{ 13129410123100726879ull, &invoker_511 },		//bool(short, int)
	{ 14679032277489512124ull, &invoker_512 },		//bool(short, unsigned int)
	{ 8106470972538925108ull, &invoker_513 },		//bool(short, int64_t)
	{ 114205702366632513ull, &invoker_514 },		//bool(short, uint64_t)
	{ 16713559509830682346ull, &invoker_515 },		//bool(short, float)
	{ 8900954212711929733ull, &invoker_516 },		//bool(short, double)
	{ 2929931959089141250ull, &invoker_517 },		//bool(unsigned short, const char*)
	{ 11750172753918058873ull, &invoker_518 },		//bool(unsigned short, bool)
	{ 3950121938363641241ull, &invoker_519 },		//bool(unsigned short, char)
	{ 8687463574972659226ull, &invoker_520 },		//bool(unsigned short, unsigned char)
	{ 12697993558280305019ull, &invoker_521 },		//bool(unsigned short, short)
	{ 9468455552436546250ull, &invoker_522 },		//bool(unsigned short, unsigned short)
	{ 14872716367228334218ull, &invoker_523 },		//bool(unsigned short, int)
	{ 8082466632268154315ull, &invoker_524 },		//bool(unsigned short, unsigned int)
	{ 4531150388582325141ull, &invoker_525 },		//bool(unsigned short, int64_t)
	{ 10157434772360154246ull, &invoker_526 },		//bool(unsigned short, uint64_t)
	{ 1353979073250822527ull, &invoker_527 },		//bool(unsigned short, float)
	{ 13034139003173855718ull, &invoker_528 },		//bool(unsigned short, double)
	{ 15683150538819426524ull, &invoker_529 },		//bool(int, const char*)
	{ 40430319598678375ull, &invoker_530 },		//bool(int, bool)
	{ 14770045896876267027ull, &invoker_531 },		//bool(int, char)
	{ 13619150560835179984ull, &invoker_532 },		//bool(int, unsigned char)
	{ 13700880067737367469ull, &invoker_533 },		//bool(int, short)
	{ 14235009079648735232ull, &invoker_534 },		//bool(int, unsigned short)
	{ 5054036214989558420ull, &invoker_535 },		//bool(int, int)
	{ 3700348371718964145ull, &invoker_536 },		//bool(int, unsigned int)
	{ 16118619240347892311ull, &invoker_537 },		//bool(int, int64_t)
	{ 4027396824110836652ull, &invoker_538 },		//bool(int, uint64_t)
	{ 5511886865330710885ull, &invoker_539 },		//bool(int, float)
	{ 3648914650678568152ull, &invoker_540 },		//bool(int, double)
	{ 16925050689949038869ull, &invoker_541 },		//bool(unsigned int, const char*)
	{ 11825209284476713316ull, &invoker_542 },		//bool(unsigned int, bool)
	{ 10143030276409605508ull, &invoker_543 },		//bool(unsigned int, char)
	{ 13756053724599736229ull, &invoker_544 },		//bool(unsigned int, unsigned char)
	{ 9552001490008204700ull, &invoker_545 },		//bool(unsigned int, short)
	{ 3010414230042079759ull, &invoker_546 },		//bool(unsigned int, unsigned short)
	{ 5050960395477224445ull, &invoker_547 },		//bool(unsigned int, int)
	{ 1602138645116846670ull, &invoker_548 },		//bool(unsigned int, unsigned int)
	{ 17884632586580562762ull, &invoker_549 },		//bool(unsigned int, int64_t)
	{ 6390113357706947ull, &invoker_550 },		//bool(unsigned int, uint64_t)
	{ 15716623311109190860ull, &invoker_551 },		//bool(unsigned int, float)
	{ 12322231951015211403ull, &invoker_552 },		//bool(unsigned int, double)
	{ 13995510196032372325ull, &invoker_553 },		//bool(int64_t, const char*)
	{ 13356993103499754932ull, &invoker_554 },		//bool(int64_t, bool)
	{ 2964770573591575156ull, &invoker_555 },		//bool(int64_t, char)
	{ 9155517400092112629ull, &invoker_556 },		//bool(int64_t, unsigned char)
	{ 476015147961909868ull, &invoker_557 },		//bool(int64_t, short)
	{ 12497541684060538495ull, &invoker_558 },		//bool(int64_t, unsigned short)
	{ 15441556593567140749ull, &invoker_559 },		//bool(int64_t, int)
	{ 9113776609096867902ull, &invoker_560 },		//bool(int64_t, unsigned int)
	{ 18412769996038679450ull, &invoker_561 },		//bool(int64_t, int64_t)
	{ 7951808193641128275ull, &invoker_562 },		//bool(int64_t, uint64_t)
	{ 9640562462034342812ull, &invoker_563 },		//bool(int64_t, float)
	{ 11312798236550118523ull, &invoker_564 },		//bool(int64_t, double)
	{ 1631594116025172046ull, &invoker_565 },		//bool(uint64_t, const char*)
	{ 17890736214609822989ull, &invoker_566 },		//bool(uint64_t, bool)
	{ 8046420692618590581ull, &invoker_567 },		//bool(uint64_t, char)
	{ 14959927477872472590ull, &invoker_568 },		//bool(uint64_t, unsigned char)
	{ 162935522471560703ull, &invoker_569 },		//bool(uint64_t, short)
	{ 12297950240608702294ull, &invoker_570 },		//bool(uint64_t, unsigned short)
	{ 11850334696324207550ull, &invoker_571 },		//bool(uint64_t, int)
	{ 10407266276672706887ull, &invoker_572 },		//bool(uint64_t, unsigned int)
	{ 14164692115421223129ull, &invoker_573 },		//bool(uint64_t, int64_t)
	{ 9612694673030422986ull, &invoker_574 },		//bool(uint64_t, uint64_t)
	{ 1049333297843676627ull, &invoker_575 },		//bool(uint64_t, float)
	{ 9115758744927175466ull, &invoker_576 },		//bool(uint64_t, double)
	{ 13622220155483595699ull, &invoker_577 },		//bool(float, const char*)
	{ 4020109409300898630ull, &invoker_578 },		//bool(float, bool)
	{ 11144545795447871514ull, &invoker_579 },		//bool(float, char)
	{ 2794201418424152919ull, &invoker_580 },		//bool(float, unsigned char)
	{ 14900833195131056330ull, &invoker_581 },		//bool(float, short)
	{ 6957450386467131593ull, &invoker_582 },		//bool(float, unsigned short)
	{ 13708427546943658955ull, &invoker_583 },		//bool(float, int)
	{ 3605294370470055632ull, &invoker_584 },		//bool(float, unsigned int)
	{ 5178533272872945312ull, &invoker_585 },		//bool(float, int64_t)
	{ 83465811444698461ull, &invoker_586 },		//bool(float, uint64_t)
	{ 15468641531628319286ull, &invoker_587 },		//bool(float, float)
	{ 14107614084475308785ull, &invoker_588 },		//bool(float, double)
	{ 11004105004038790346ull, &invoker_589 },		//bool(double, const char*)
	{ 1264744629815450049ull, &invoker_590 },		//bool(double, bool)
	{ 10872714152251593153ull, &invoker_591 },		//bool(double, char)
	{ 8544285590850475778ull, &invoker_592 },		//bool(double, unsigned char)
	{ 8233836241472957571ull, &invoker_593 },		//bool(double, short)
	{ 3889227527941039506ull, &invoker_594 },		//bool(double, unsigned short)
	{ 13494651071862518962ull, &invoker_595 },		//bool(double, int)
	{ 9184992840877167891ull, &invoker_596 },		//bool(double, unsigned int)
	{ 15952481648224766509ull, &invoker_597 },		//bool(double, int64_t)
	{ 9799773790647970030ull, &invoker_598 },		//bool(double, uint64_t)
	{ 7641791659676143175ull, &invoker_599 },		//bool(double, float)
	{ 16626100916794893758ull, &invoker_600 },		//bool(double, double)
	{ 11699323569226340708ull, &invoker_601 },		//char(const char*, const char*)
	{ 6767325081191589327ull, &invoker_602 },		//char(const char*, bool)
	{ 8629679235888125755ull, &invoker_603 },		//char(const char*, char)
	{ 12417199664023894008ull, &invoker_604 },		//char(const char*, unsigned char)
	{ 1678564951964242709ull, &invoker_605 },		//char(const char*, short)
	{ 5702844848301826856ull, &invoker_606 },		//char(const char*, unsigned short)
	{ 15459904206920741500ull, &invoker_607 },		//char(const char*, int)
	{ 6350461828700949561ull, &invoker_608 },		//char(const char*, unsigned int)
	{ 398482395014172143ull, &invoker_609 },		//char(const char*, int64_t)
	{ 1463627121657308180ull, &invoker_610 },		//char(const char*, uint64_t)
	{ 15311502347158688685ull, &invoker_611 },		//char(const char*, float)
	{ 5938719427855092144ull, &invoker_612 },		//char(const char*, double)
	{ 1397520105875659907ull, &invoker_613 },		//char(bool, const char*)
	{ 11845474815193499542ull, &invoker_614 },		//char(bool, bool)
	{ 12859584319233931914ull, &invoker_615 },		//char(bool, char)
	{ 897431842029958823ull, &invoker_616 },		//char(bool, unsigned char)
	{ 3862802179934965082ull, &invoker_617 },		//char(bool, short)
	{ 11971395272939837561ull, &invoker_618 },		//char(bool, unsigned short)
	{ 8334583890162061595ull, &invoker_619 },		//char(bool, int)
	{ 17488820804421414336ull, &invoker_620 },		//char(bool, unsigned int)
	{ 9462620873215664304ull, &invoker_621 },		//char(bool, int64_t)
	{ 3287469220207048813ull, &invoker_622 },		//char(bool, uint64_t)
	{ 16852392354069696774ull, &invoker_623 },		//char(bool, float)
	{ 1736780774451298337ull, &invoker_624 },		//char(bool, double)
	{ 9063818692701843759ull, &invoker_625 },		//char(char, const char*)
	{ 3581986099806788810ull, &invoker_626 },		//char(char, bool)
	{ 3105385882904131318ull, &invoker_627 },		//char(char, char)
	{ 7248264543109232715ull, &invoker_628 },		//char(char, unsigned char)
	{ 17207580746570712126ull, &invoker_629 },		//char(char, short)
	{ 9998831178921907333ull, &invoker_630 },		//char(char, unsigned short)
	{ 4876582685049953135ull, &invoker_631 },		//char(char, int)
	{ 8129294112584422764ull, &invoker_632 },		//char(char, unsigned int)
	{ 14462459434700404164ull, &invoker_633 },		//char(char, int64_t)
	{ 632232877829402961ull, &invoker_634 },		//char(char, uint64_t)
	{ 2542867597361905658ull, &invoker_635 },		//char(char, float)
	{ 10999955203077943349ull, &invoker_636 },		//char(char, double)
	{ 6502396166459409776ull, &invoker_637 },		//char(unsigned char, const char*)
	{ 15734837572758001987ull, &invoker_638 },		//char(unsigned char, bool)
	{ 158507171579453863ull, &invoker_639 },		//char(unsigned char, char)
	{ 14425906417467435756ull, &invoker_640 },		//char(unsigned char, unsigned char)
	{ 4596276266768165241ull, &invoker_641 },		//char(unsigned char, short)
	{ 17375744442785196932ull, &invoker_642 },		//char(unsigned char, unsigned short)
	{ 14800217000195675840ull, &invoker_643 },		//char(unsigned char, int)
	{ 4382677606592661413ull, &invoker_644 },		//char(unsigned char, unsigned int)
	{ 13990208017239552979ull, &invoker_645 },		//char(unsigned char, int64_t)
	{ 3861634016334773016ull, &invoker_646 },		//char(unsigned char, uint64_t)
	{ 16379761939721417121ull, &invoker_647 },		//char(unsigned char, float)
	{ 886686659620312372ull, &invoker_648 },		//char(unsigned char, double)
	{ 10894956866666127007ull, &invoker_649 },		//char(short, const char*)
	{ 12299500915645862074ull, &invoker_650 },		//char(short, bool)
	{ 17549304878978170310ull, &invoker_651 },		//char(short, char)
	{ 14866613221567266171ull, &invoker_652 },		//char(short, unsigned char)
	{ 1926869643351505646ull, &invoker_653 },		//char(short, short)
	{ 2331290742220193109ull, &invoker_654 },		//char(short, unsigned short)
	{ 5763312347617570911ull, &invoker_655 },		//char(short, int)
	{ 12553419991790529724ull, &invoker_656 },		//char(short, unsigned int)
	{ 516956579838843444ull, &invoker_657 },		//char(short, int64_t)
	{ 7968301815712380993ull, &invoker_658 },		//char(short, uint64_t)
	{ 8751800014565990634ull, &invoker_659 },		//char(short, float)
	{ 7153680907004593541ull, &invoker_660 },		//char(short, double)
	{ 5183752969690747906ull, &invoker_661 },		//char(unsigned short, const char*)
	{ 4023135259030797177ull, &invoker_662 },		//char(unsigned short, bool)
	{ 14669828517185931161ull, &invoker_663 },		//char(unsigned short, char)
	{ 17418360895505572890ull, &invoker_664 },		//char(unsigned short, unsigned char)
	{ 10967194063520622459ull, &invoker_665 },		//char(unsigned short, short)
	{ 3213118194815227082ull, &invoker_666 },		//char(unsigned short, unsigned short)
	{ 12747104081529351818ull, &invoker_667 },		//char(unsigned short, int)
	{ 14887861450550321099ull, &invoker_668 },		//char(unsigned short, unsigned int)
	{ 6557911076832950677ull, &invoker_669 },		//char(unsigned short, int64_t)
	{ 4597651818695870086ull, &invoker_670 },		//char(unsigned short, uint64_t)
	{ 18069923652200691583ull, &invoker_671 },		//char(unsigned short, float)
	{ 5819304134628396006ull, &invoker_672 },		//char(unsigned short, double)
	{ 14946050040317416156ull, &invoker_673 },		//char(int, const char*)
	{ 2348090533639126887ull, &invoker_674 },		//char(int, bool)
	{ 17077706110916715539ull, &invoker_675 },		//char(int, char)
	{ 14571505490746007504ull, &invoker_676 },		//char(int, unsigned char)
	{ 6334782292254211501ull, &invoker_677 },		//char(int, short)
	{ 12109396793949752832ull, &invoker_678 },		//char(int, unsigned short)
	{ 8265825173279378580ull, &invoker_679 },		//char(int, int)
	{ 15551695962993168817ull, &invoker_680 },		//char(int, unsigned int)
	{ 8156859745083200599ull, &invoker_681 },		//char(int, int64_t)
	{ 2280123518403500460ull, &invoker_682 },		//char(int, uint64_t)
	{ 16592533163557106533ull, &invoker_683 },		//char(int, float)
	{ 485754606183457496ull, &invoker_684 },		//char(int, double)
	{ 6978886510885390101ull, &invoker_685 },		//char(unsigned int, const char*)
	{ 12777564214387540836ull, &invoker_686 },		//char(unsigned int, bool)
	{ 11095385206320433028ull, &invoker_687 },		//char(unsigned int, char)
	{ 16009874735201342885ull, &invoker_688 },		//char(unsigned int, unsigned char)
	{ 7426389204309222300ull, &invoker_689 },		//char(unsigned int, short)
	{ 9815809048324246543ull, &invoker_690 },		//char(unsigned int, unsigned short)
	{ 16902307986751429117ull, &invoker_691 },		//char(unsigned int, int)
	{ 13630412824254090318ull, &invoker_692 },		//char(unsigned int, unsigned int)
	{ 16153833091820880202ull, &invoker_693 },		//char(unsigned int, int64_t)
	{ 11238299318521798851ull, &invoker_694 },		//char(unsigned int, uint64_t)
	{ 13591011025410208460ull, &invoker_695 },		//char(unsigned int, float)
	{ 4595194456127949707ull, &invoker_696 },		//char(unsigned int, double)
	{ 6268472701145110629ull, &invoker_697 },		//char(int64_t, const char*)
	{ 11609719797792418740ull, &invoker_698 },		//char(int64_t, bool)
	{ 1217497267884238964ull, &invoker_699 },		//char(int64_t, char)
	{ 1940682531546652917ull, &invoker_700 },		//char(int64_t, unsigned char)
	{ 11333244828971379820ull, &invoker_701 },		//char(int64_t, short)
	{ 14524302372311164031ull, &invoker_702 },		//char(int64_t, unsigned short)
	{ 7479797098302449037ull, &invoker_703 },		//char(int64_t, int)
	{ 7382977114337185342ull, &invoker_704 },		//char(int64_t, unsigned int)
	{ 17675669497536669082ull, &invoker_705 },		//char(int64_t, int64_t)
	{ 1356411711205781331ull, &invoker_706 },		//char(int64_t, uint64_t)
	{ 2051048069334261148ull, &invoker_707 },		//char(int64_t, float)
	{ 720150276186315387ull, &invoker_708 },		//char(int64_t, double)
	{ 18347538694975041102ull, &invoker_709 },		//char(uint64_t, const char*)
	{ 10301221821909741325ull, &invoker_710 },		//char(uint64_t, bool)
	{ 456906299918508917ull, &invoker_711 },		//char(uint64_t, char)
	{ 16986688166123098126ull, &invoker_712 },		//char(uint64_t, unsigned char)
	{ 8017031635817309183ull, &invoker_713 },		//char(uint64_t, short)
	{ 6738167286944418134ull, &invoker_714 },		//char(uint64_t, unsigned short)
	{ 10103061390616871358ull, &invoker_715 },		//char(uint64_t, int)
	{ 3192431408127247175ull, &invoker_716 },		//char(uint64_t, unsigned int)
	{ 7569295632985876185ull, &invoker_717 },		//char(uint64_t, int64_t)
	{ 10565049602941250506ull, &invoker_718 },		//char(uint64_t, uint64_t)
	{ 8903429411189425107ull, &invoker_719 },		//char(uint64_t, float)
	{ 8378658246425165098ull, &invoker_720 },		//char(uint64_t, double)
	{ 14574575085394423219ull, &invoker_721 },		//char(float, const char*)
	{ 856949364805787974ull, &invoker_722 },		//char(float, bool)
	{ 7981385750952760858ull, &invoker_723 },		//char(float, char)
	{ 13513907997246442839ull, &invoker_724 },		//char(float, unsigned char)
	{ 6939073699866364618ull, &invoker_725 },		//char(float, short)
	{ 5226650891707449033ull, &invoker_726 },		//char(float, unsigned short)
	{ 6342329771460502987ull, &invoker_727 },		//char(float, int)
	{ 1479682084771073232ull, &invoker_728 },		//char(float, unsigned int)
	{ 16035762953882415264ull, &invoker_729 },		//char(float, int64_t)
	{ 7937561924790446941ull, &invoker_730 },		//char(float, uint64_t)
	{ 7506882036363627574ull, &invoker_731 },		//char(float, float)
	{ 12360340778767972593ull, &invoker_732 },		//char(float, double)
	{ 8878492718339807946ull, &invoker_733 },		//char(double, const char*)
	{ 11749729208260309953ull, &invoker_734 },		//char(double, bool)
	{ 2910954656986901441ull, &invoker_735 },		//char(double, char)
	{ 6813486096090793218ull, &invoker_736 },		//char(double, unsigned char)
	{ 6486562935765621379ull, &invoker_737 },		//char(double, short)
	{ 15121136733105131410ull, &invoker_738 },		//char(double, unsigned short)
	{ 10331491027367408306ull, &invoker_739 },		//char(double, int)
	{ 1457955345989906195ull, &invoker_740 },		//char(double, unsigned int)
	{ 5359833687860963373ull, &invoker_741 },		//char(double, int64_t)
	{ 9062673292145959662ull, &invoker_742 },		//char(double, uint64_t)
	{ 5894518353968806983ull, &invoker_743 },		//char(double, float)
	{ 9036586524094812094ull, &invoker_744 },		//char(double, double)
	{ 16132868787722787867ull, &invoker_745 },		//unsigned char(const char*, const char*)
	{ 1526605767738532462ull, &invoker_746 },		//unsigned char(const char*, bool)
	{ 17187703207194648514ull, &invoker_747 },		//unsigned char(const char*, char)
	{ 9694793316014809343ull, &invoker_748 },		//unsigned char(const char*, unsigned char)
	{ 10487158983795042642ull, &invoker_749 },		//unsigned char(const char*, short)
	{ 12971788731597099057ull, &invoker_750 },		//unsigned char(const char*, unsigned short)
	{ 5165735836535959507ull, &invoker_751 },		//unsigned char(const char*, int)
	{ 3556953926382470328ull, &invoker_752 },		//unsigned char(const char*, unsigned int)
	{ 10879188976208704056ull, &invoker_753 },		//unsigned char(const char*, int64_t)
	{ 15838541047470541029ull, &invoker_754 },		//unsigned char(const char*, uint64_t)
	{ 15712626723576123134ull, &invoker_755 },		//unsigned char(const char*, float)
	{ 5625445918873591721ull, &invoker_756 },		//unsigned char(const char*, double)
	{ 14694693640569321806ull, &invoker_757 },		//unsigned char(bool, const char*)
	{ 6611481509397364749ull, &invoker_758 },		//unsigned char(bool, bool)
	{ 15213910061115683957ull, &invoker_759 },		//unsigned char(bool, char)
	{ 7882072208018035470ull, &invoker_760 },		//unsigned char(bool, unsigned char)
	{ 12661359582300260095ull, &invoker_761 },		//unsigned char(bool, short)
	{ 8498022096734675542ull, &invoker_762 },		//unsigned char(bool, unsigned short)
	{ 10020464602869804222ull, &invoker_763 },		//unsigned char(bool, int)
	{ 11778831982773957703ull, &invoker_764 },		//unsigned char(bool, unsigned int)
	{ 10123361345442775513ull, &invoker_765 },		//unsigned char(bool, int64_t)
	{ 14750561126471584970ull, &invoker_766 },		//unsigned char(bool, uint64_t)
	{ 13547757357672376019ull, &invoker_767 },		//unsigned char(bool, float)
	{ 9401208865839134250ull, &invoker_768 },		//unsigned char(bool, double)
	{ 12575430541327806614ull, &invoker_769 },		//unsigned char(char, const char*)
	{ 6013858297578954325ull, &invoker_770 },		//unsigned char(char, bool)
	{ 12543335344987112125ull, &invoker_771 },		//unsigned char(char, char)
	{ 17850829099910385782ull, &invoker_772 },		//unsigned char(char, unsigned char)
	{ 1714070923873672743ull, &invoker_773 },		//unsigned char(char, short)
	{ 36045096468043966ull, &invoker_774 },		//unsigned char(char, unsigned short)
	{ 4543956807064623366ull, &invoker_775 },		//unsigned char(char, int)
	{ 5683898108136397807ull, &invoker_776 },		//unsigned char(char, unsigned int)
	{ 4250284700471765041ull, &invoker_777 },		//unsigned char(char, int64_t)
	{ 11943860644050134898ull, &invoker_778 },		//unsigned char(char, uint64_t)
	{ 6964580086827063803ull, &invoker_779 },		//unsigned char(char, float)
	{ 11472146275246029890ull, &invoker_780 },		//unsigned char(char, double)
	{ 15087130288277738459ull, &invoker_781 },		//unsigned char(unsigned char, const char*)
	{ 4970975484690417710ull, &invoker_782 },		//unsigned char(unsigned char, bool)
	{ 2185328850436982146ull, &invoker_783 },		//unsigned char(unsigned char, char)
	{ 8671170014659644991ull, &invoker_784 },		//unsigned char(unsigned char, unsigned char)
	{ 15414254610024950034ull, &invoker_785 },		//unsigned char(unsigned char, short)
	{ 2318936011167060337ull, &invoker_786 },		//unsigned char(unsigned char, unsigned short)
	{ 693735890276674707ull, &invoker_787 },		//unsigned char(unsigned char, int)
	{ 1102485061534836472ull, &invoker_788 },		//unsigned char(unsigned char, unsigned int)
	{ 8256717241764780536ull, &invoker_789 },		//unsigned char(unsigned char, int64_t)
	{ 12586798098365558693ull, &invoker_790 },		//unsigned char(unsigned char, uint64_t)
	{ 14794941176100909502ull, &invoker_791 },		//unsigned char(unsigned char, float)
	{ 10152621803464706921ull, &invoker_792 },		//unsigned char(unsigned char, double)
	{ 7772454261477385320ull, &invoker_793 },		//unsigned char(short, const char*)
	{ 4540895563686301819ull, &invoker_794 },		//unsigned char(short, bool)
	{ 11508088406329708991ull, &invoker_795 },		//unsigned char(short, char)
	{ 934350003224608292ull, &invoker_796 },		//unsigned char(short, unsigned char)
	{ 5365499404612010993ull, &invoker_797 },		//unsigned char(short, short)
	{ 12686696117965962428ull, &invoker_798 },		//unsigned char(short, unsigned short)
	{ 14548173448893126008ull, &invoker_799 },		//unsigned char(short, int)
	{ 17892431726042190493ull, &invoker_800 },		//unsigned char(short, unsigned int)
	{ 2503622866263825499ull, &invoker_801 },		//unsigned char(short, int64_t)
	{ 10984906584139893360ull, &invoker_802 },		//unsigned char(short, uint64_t)
	{ 13984373629107014393ull, &invoker_803 },		//unsigned char(short, float)
	{ 2111155085446667516ull, &invoker_804 },		//unsigned char(short, double)
	{ 10633808588631063427ull, &invoker_805 },		//unsigned char(unsigned short, const char*)
	{ 11467117327105856662ull, &invoker_806 },		//unsigned char(unsigned short, bool)
	{ 12481226831146289034ull, &invoker_807 },		//unsigned char(unsigned short, char)
	{ 13633873311429340583ull, &invoker_808 },		//unsigned char(unsigned short, unsigned char)
	{ 13173942848537142362ull, &invoker_809 },		//unsigned char(unsigned short, short)
	{ 1778475640820043129ull, &invoker_810 },		//unsigned char(unsigned short, unsigned short)
	{ 14426142913398476827ull, &invoker_811 },		//unsigned char(unsigned short, int)
	{ 7749918566884367040ull, &invoker_812 },		//unsigned char(unsigned short, unsigned int)
	{ 16613069187310407600ull, &invoker_813 },		//unsigned char(unsigned short, int64_t)
	{ 3757970896865547629ull, &invoker_814 },		//unsigned char(unsigned short, uint64_t)
	{ 7716788948962322438ull, &invoker_815 },		//unsigned char(unsigned short, float)
	{ 7190447417306518817ull, &invoker_816 },		//unsigned char(unsigned short, double)
	{ 3646492452653273611ull, &invoker_817 },		//unsigned char(int, const char*)
	{ 9046020618682544926ull, &invoker_818 },		//unsigned char(int, bool)
	{ 3464546529460913938ull, &invoker_819 },		//unsigned char(int, char)
	{ 1950138138129852079ull, &invoker_820 },		//unsigned char(int, unsigned char)
	{ 3860299845549232322ull, &invoker_821 },		//unsigned char(int, short)
	{ 13766071013829603329ull, &invoker_822 },		//unsigned char(int, unsigned short)
	{ 4199244585709560131ull, &invoker_823 },		//unsigned char(int, int)
	{ 18224055881890257736ull, &invoker_824 },		//unsigned char(int, unsigned int)
	{ 13736109121673217064ull, &invoker_825 },		//unsigned char(int, int64_t)
	{ 12761660624402486997ull, &invoker_826 },		//unsigned char(int, uint64_t)
	{ 15245263430690743150ull, &invoker_827 },		//unsigned char(int, float)
	{ 17600133073149931449ull, &invoker_828 },		//unsigned char(int, double)
	{ 13936435007777803728ull, &invoker_829 },		//unsigned char(unsigned int, const char*)
	{ 7608067569526136995ull, &invoker_830 },		//unsigned char(unsigned int, bool)
	{ 10478481242057140487ull, &invoker_831 },		//unsigned char(unsigned int, char)
	{ 12457445580527959756ull, &invoker_832 },		//unsigned char(unsigned int, unsigned char)
	{ 12539584438869006681ull, &invoker_833 },		//unsigned char(unsigned int, short)
	{ 14771577769823253988ull, &invoker_834 },		//unsigned char(unsigned int, unsigned short)
	{ 14706952879507577120ull, &invoker_835 },		//unsigned char(unsigned int, int)
	{ 5164661032013735813ull, &invoker_836 },		//unsigned char(unsigned int, unsigned int)
	{ 9110972504542831219ull, &invoker_837 },		//unsigned char(unsigned int, int64_t)
	{ 17618818948453580088ull, &invoker_838 },		//unsigned char(unsigned int, uint64_t)
	{ 6260389477472692737ull, &invoker_839 },		//unsigned char(unsigned int, float)
	{ 16932144497451206036ull, &invoker_840 },		//unsigned char(unsigned int, double)
	{ 2363888172514613538ull, &invoker_841 },		//unsigned char(int64_t, const char*)
	{ 9617214332891705625ull, &invoker_842 },		//unsigned char(int64_t, bool)
	{ 1817304254825699001ull, &invoker_843 },		//unsigned char(int64_t, char)
	{ 11758779281213377210ull, &invoker_844 },		//unsigned char(int64_t, unsigned char)
	{ 14277963432322530075ull, &invoker_845 },		//unsigned char(int64_t, short)
	{ 2516226988421914474ull, &invoker_846 },		//unsigned char(int64_t, unsigned short)
	{ 16976858830485728298ull, &invoker_847 },		//unsigned char(int64_t, int)
	{ 736185319466849131ull, &invoker_848 },		//unsigned char(int64_t, unsigned int)
	{ 14892059533326400629ull, &invoker_849 },		//unsigned char(int64_t, int64_t)
	{ 11928382223625854822ull, &invoker_850 },		//unsigned char(int64_t, uint64_t)
	{ 15152158831175254815ull, &invoker_851 },		//unsigned char(int64_t, float)
	{ 15007005948671905798ull, &invoker_852 },		//unsigned char(int64_t, double)
	{ 14471202149920597999ull, &invoker_853 },		//unsigned char(uint64_t, const char*)
	{ 21776387283061386ull, &invoker_854 },		//unsigned char(uint64_t, bool)
	{ 17363114312431668406ull, &invoker_855 },		//unsigned char(uint64_t, char)
	{ 2543985591926801547ull, &invoker_856 },		//unsigned char(uint64_t, unsigned char)
	{ 1689382116081018622ull, &invoker_857 },		//unsigned char(uint64_t, short)
	{ 12690945764918885317ull, &invoker_858 },		//unsigned char(uint64_t, unsigned short)
	{ 11417065872161657135ull, &invoker_859 },		//unsigned char(uint64_t, int)
	{ 1755858648668339628ull, &invoker_860 },		//unsigned char(uint64_t, unsigned int)
	{ 5103904935229696132ull, &invoker_861 },		//unsigned char(uint64_t, int64_t)
	{ 4318918712305484049ull, &invoker_862 },		//unsigned char(uint64_t, uint64_t)
	{ 17828492710799482042ull, &invoker_863 },		//unsigned char(uint64_t, float)
	{ 13072188871848322549ull, &invoker_864 },		//unsigned char(uint64_t, double)
	{ 13004380591715095124ull, &invoker_865 },		//unsigned char(float, const char*)
	{ 5747235143659137727ull, &invoker_866 },		//unsigned char(float, bool)
	{ 10736417576344519435ull, &invoker_867 },		//unsigned char(float, char)
	{ 12992365789503834344ull, &invoker_868 },		//unsigned char(float, unsigned char)
	{ 11871389304451444549ull, &invoker_869 },		//unsigned char(float, short)
	{ 12713600266222360184ull, &invoker_870 },		//unsigned char(float, unsigned short)
	{ 8743484564302136620ull, &invoker_871 },		//unsigned char(float, int)
	{ 9523919253879497481ull, &invoker_872 },		//unsigned char(float, unsigned int)
	{ 8932800098310641631ull, &invoker_873 },		//unsigned char(float, int64_t)
	{ 3753164060819070340ull, &invoker_874 },		//unsigned char(float, uint64_t)
	{ 3771376501683649949ull, &invoker_875 },		//unsigned char(float, float)
	{ 9740529478806084672ull, &invoker_876 },		//unsigned char(float, double)
	{ 5508891013653307631ull, &invoker_877 },		//unsigned char(double, const char*)
	{ 10757887696609379722ull, &invoker_878 },		//unsigned char(double, bool)
	{ 9652481548048435126ull, &invoker_879 },		//unsigned char(double, char)
	{ 6075184328868685195ull, &invoker_880 },		//unsigned char(double, unsigned char)
	{ 13156766963991095294ull, &invoker_881 },		//unsigned char(double, short)
	{ 12683924105340948165ull, &invoker_882 },		//unsigned char(double, unsigned short)
	{ 14480821558257642031ull, &invoker_883 },		//unsigned char(double, int)
	{ 221388002307135660ull, &invoker_884 },		//unsigned char(double, unsigned int)
	{ 11357750698467021188ull, &invoker_885 },		//unsigned char(double, int64_t)
	{ 10163654800746851345ull, &invoker_886 },		//unsigned char(double, uint64_t)
	{ 10849133485000007098ull, &invoker_887 },		//unsigned char(double, float)
	{ 9270793037079943413ull, &invoker_888 },		//unsigned char(double, double)
	{ 9536097486038327788ull, &invoker_889 },		//short(const char*, const char*)
	{ 4897776356367357175ull, &invoker_890 },		//short(const char*, bool)
	{ 16839933776016709059ull, &invoker_891 },		//short(const char*, char)
	{ 4104380902405860320ull, &invoker_892 },		//short(const char*, unsigned char)
	{ 3829013820513359997ull, &invoker_893 },		//short(const char*, short)
	{ 12620420907541883696ull, &invoker_894 },		//short(const char*, unsigned short)
	{ 13894295431451248356ull, &invoker_895 },		//short(const char*, int)
	{ 3457444640310842017ull, &invoker_896 },		//short(const char*, unsigned int)
	{ 17682151755012912615ull, &invoker_897 },		//short(const char*, int64_t)
	{ 17920590621832587324ull, &invoker_898 },		//short(const char*, uint64_t)
	{ 7701638749528706869ull, &invoker_899 },		//short(const char*, float)
	{ 8582313853753658120ull, &invoker_900 },		//short(const char*, double)
	{ 16603777730493155499ull, &invoker_901 },		//short(bool, const char*)
	{ 5182127117873367742ull, &invoker_902 },		//short(bool, bool)
	{ 11429085162397489842ull, &invoker_903 },		//short(bool, char)
	{ 12183546998378278863ull, &invoker_904 },		//short(bool, unsigned char)
	{ 7779755077892884706ull, &invoker_905 },		//short(bool, short)
	{ 3382657210798904097ull, &invoker_906 },		//short(bool, unsigned short)
	{ 706890627832131427ull, &invoker_907 },		//short(bool, int)
	{ 10954592886193146600ull, &invoker_908 },		//short(bool, unsigned int)
	{ 8185729916789152648ull, &invoker_909 },		//short(bool, int64_t)
	{ 15176668924217327925ull, &invoker_910 },		//short(bool, uint64_t)
	{ 12936155524946110734ull, &invoker_911 },		//short(bool, float)
	{ 5222929501679864409ull, &invoker_912 },		//short(bool, double)
	{ 14987553097925742103ull, &invoker_913 },		//short(char, const char*)
	{ 1342587134489255090ull, &invoker_914 },		//short(char, bool)
	{ 10361536832392092222ull, &invoker_915 },		//short(char, char)
	{ 17929313212463546131ull, &invoker_916 },		//short(char, unsigned char)
	{ 17138945326453998886ull, &invoker_917 },		//short(char, short)
	{ 5983092370319548077ull, &invoker_918 },		//short(char, unsigned short)
	{ 10593459734287225751ull, &invoker_919 },		//short(char, int)
	{ 1937652021235713428ull, &invoker_920 },		//short(char, unsigned int)
	{ 402527230323525692ull, &invoker_921 },		//short(char, int64_t)
	{ 12933660038165051993ull, &invoker_922 },		//short(char, uint64_t)
	{ 11870921124870074114ull, &invoker_923 },		//short(char, float)
	{ 2087045764598021261ull, &invoker_924 },		//short(char, double)
	{ 17547354510237600472ull, &invoker_925 },		//short(unsigned char, const char*)
	{ 3116677083235629099ull, &invoker_926 },		//short(unsigned char, bool)
	{ 4173803323304036303ull, &invoker_927 },		//short(unsigned char, char)
	{ 2141510758947675796ull, &invoker_928 },		//short(unsigned char, unsigned char)
	{ 10521489075647765281ull, &invoker_929 },		//short(unsigned char, short)
	{ 10777686955178596620ull, &invoker_930 },		//short(unsigned char, unsigned short)
	{ 13123246722073318120ull, &invoker_931 },		//short(unsigned char, int)
	{ 894477378609517613ull, &invoker_932 },		//short(unsigned char, unsigned int)
	{ 4742221282586667723ull, &invoker_933 },		//short(unsigned char, int64_t)
	{ 7807469740802580192ull, &invoker_934 },		//short(unsigned char, uint64_t)
	{ 16221653492735811753ull, &invoker_935 },		//short(unsigned char, float)
	{ 6874157572701957068ull, &invoker_936 },		//short(unsigned char, double)
	{ 5824022064997268775ull, &invoker_937 },		//short(short, const char*)
	{ 2502066884153414850ull, &invoker_938 },		//short(short, bool)
	{ 14455742771620898862ull, &invoker_939 },		//short(short, char)
	{ 12076132597394313507ull, &invoker_940 },		//short(short, unsigned char)
	{ 14331000083152407414ull, &invoker_941 },		//short(short, short)
	{ 15495651821272044253ull, &invoker_942 },		//short(short, unsigned short)
	{ 15976691848028940647ull, &invoker_943 },		//short(short, int)
	{ 16579349587490811460ull, &invoker_944 },		//short(short, unsigned int)
	{ 15933271390636821772ull, &invoker_945 },		//short(short, int64_t)
	{ 1939299791246365673ull, &invoker_946 },		//short(short, uint64_t)
	{ 18210319195807929874ull, &invoker_947 },		//short(short, float)
	{ 13234911301700514621ull, &invoker_948 },		//short(short, double)
	{ 9812742650726993482ull, &invoker_949 },		//short(unsigned short, const char*)
	{ 5667719868008605249ull, &invoker_950 },		//short(unsigned short, bool)
	{ 15275689390444748353ull, &invoker_951 },		//short(unsigned short, char)
	{ 9309254757471061122ull, &invoker_952 },		//short(unsigned short, unsigned char)
	{ 11411267902248643075ull, &invoker_953 },		//short(unsigned short, short)
	{ 14692277559364498962ull, &invoker_954 },		//short(unsigned short, unsigned short)
	{ 14964393699197990450ull, &invoker_955 },		//short(unsigned short, int)
	{ 8870259309199749523ull, &invoker_956 },		//short(unsigned short, unsigned int)
	{ 681162273059201965ull, &invoker_957 },		//short(unsigned short, int64_t)
	{ 2368699774712839534ull, &invoker_958 },		//short(unsigned short, uint64_t)
	{ 10819223320451828679ull, &invoker_959 },		//short(unsigned short, float)
	{ 8186676727314556478ull, &invoker_960 },		//short(unsigned short, double)
	{ 3595962706265934532ull, &invoker_961 },		//short(int, const char*)
	{ 13522166550854652847ull, &invoker_962 },		//short(int, bool)
	{ 15768584144911175067ull, &invoker_963 },		//short(int, char)
	{ 2249166525299228376ull, &invoker_964 },		//short(int, unsigned char)
	{ 13862712160981563125ull, &invoker_965 },		//short(int, short)
	{ 2167686070071026824ull, &invoker_966 },		//short(int, unsigned short)
	{ 17667073990635904348ull, &invoker_967 },		//short(int, int)
	{ 9404471644368786329ull, &invoker_968 },		//short(int, unsigned int)
	{ 386155504363439759ull, &invoker_969 },		//short(int, int64_t)
	{ 10265829637625240628ull, &invoker_970 },		//short(int, uint64_t)
	{ 2436448590767538317ull, &invoker_971 },		//short(int, float)
	{ 3569375209954163472ull, &invoker_972 },		//short(int, double)
	{ 6072263260984585021ull, &invoker_973 },		//short(unsigned int, const char*)
	{ 10262018489465244748ull, &invoker_974 },		//short(unsigned int, bool)
	{ 12816475384786607340ull, &invoker_975 },		//short(unsigned int, char)
	{ 6044294466695784461ull, &invoker_976 },		//short(unsigned int, unsigned char)
	{ 10301229635232293252ull, &invoker_977 },		//short(unsigned int, short)
	{ 11272796863434305495ull, &invoker_978 },		//short(unsigned int, unsigned short)
	{ 2190659294131539365ull, &invoker_979 },		//short(unsigned int, int)
	{ 9987529634714234358ull, &invoker_980 },		//short(unsigned int, unsigned int)
	{ 9780762501490906690ull, &invoker_981 },		//short(unsigned int, int64_t)
	{ 8294664916336672139ull, &invoker_982 },		//short(unsigned int, uint64_t)
	{ 16315911158535227764ull, &invoker_983 },		//short(unsigned int, float)
	{ 2729596415277612579ull, &invoker_984 },		//short(unsigned int, double)
	{ 9676025853501906237ull, &invoker_985 },		//short(int64_t, const char*)
	{ 14026353675322032716ull, &invoker_986 },		//short(int64_t, bool)
	{ 16580810570643395308ull, &invoker_987 },		//short(int64_t, char)
	{ 8704241914051602957ull, &invoker_988 },		//short(int64_t, unsigned char)
	{ 15211341412853670788ull, &invoker_989 },		//short(int64_t, short)
	{ 3449419797516277207ull, &invoker_990 },		//short(int64_t, unsigned short)
	{ 10853563278387969957ull, &invoker_991 },		//short(int64_t, int)
	{ 6620651515170153462ull, &invoker_992 },		//short(int64_t, unsigned int)
	{ 1791123862080677954ull, &invoker_993 },		//short(int64_t, int64_t)
	{ 4812020047478150027ull, &invoker_994 },		//short(int64_t, uint64_t)
	{ 2779278862447053684ull, &invoker_995 },		//short(int64_t, float)
	{ 9579080388892501027ull, &invoker_996 },		//short(int64_t, double)
	{ 4183233843524180566ull, &invoker_997 },		//short(uint64_t, const char*)
	{ 6620109838719442197ull, &invoker_998 },		//short(uint64_t, bool)
	{ 553309348638697341ull, &invoker_999 },		//short(uint64_t, char)
	{ 16324269663449912246ull, &invoker_1000 },		//short(uint64_t, unsigned char)
	{ 17828600475746031335ull, &invoker_1001 },		//short(uint64_t, short)
	{ 4081031745970736126ull, &invoker_1002 },		//short(uint64_t, unsigned short)
	{ 13488651224221864134ull, &invoker_1003 },		//short(uint64_t, int)
	{ 15201451174879440431ull, &invoker_1004 },		//short(uint64_t, unsigned int)
	{ 15899690302383903217ull, &invoker_1005 },		//short(uint64_t, int64_t)
	{ 959865608953407794ull, &invoker_1006 },		//short(uint64_t, uint64_t)
	{ 10999939226902077627ull, &invoker_1007 },		//short(uint64_t, float)
	{ 1705699321713626882ull, &invoker_1008 },		//short(uint64_t, double)
	{ 9024715578929201211ull, &invoker_1009 },		//short(float, const char*)
	{ 9710725475198630030ull, &invoker_1010 },		//short(float, bool)
	{ 6924938103456783458ull, &invoker_1011 },		//short(float, char)
	{ 6810140477813959071ull, &invoker_1012 },		//short(float, unsigned char)
	{ 158898321078726514ull, &invoker_1013 },		//short(float, short)
	{ 13009048809447583057ull, &invoker_1014 },		//short(float, unsigned short)
	{ 8889551720969711859ull, &invoker_1015 },		//short(float, int)
	{ 1978469270069943896ull, &invoker_1016 },		//short(float, unsigned int)
	{ 2570720359359412504ull, &invoker_1017 },		//short(float, int64_t)
	{ 12247609156639758149ull, &invoker_1018 },		//short(float, uint64_t)
	{ 17986469698352648606ull, &invoker_1019 },		//short(float, float)
	{ 16283603152011914313ull, &invoker_1020 },		//short(float, double)
	{ 5319564153842738082ull, &invoker_1021 },		//short(double, const char*)
	{ 16480130642960881817ull, &invoker_1022 },		//short(double, bool)
	{ 8680220564894875193ull, &invoker_1023 },		//short(double, char)
	{ 8150347398181747002ull, &invoker_1024 },		//short(double, unsigned char)
	{ 9573768774646094235ull, &invoker_1025 },		//short(double, short)
	{ 13841088445237699306ull, &invoker_1026 },		//short(double, unsigned short)
	{ 4656503346406188714ull, &invoker_1027 },		//short(double, int)
	{ 17632048067602426603ull, &invoker_1028 },		//short(double, unsigned int)
	{ 11160099900183666421ull, &invoker_1029 },		//short(double, int64_t)
	{ 1328722450136055526ull, &invoker_1030 },		//short(double, uint64_t)
	{ 10447964173498818975ull, &invoker_1031 },		//short(double, float)
	{ 14532110372552467334ull, &invoker_1032 },		//short(double, double)
	{ 17438519924015044417ull, &invoker_1033 },		//unsigned short(const char*, const char*)
	{ 16865339077517130616ull, &invoker_1034 },		//unsigned short(const char*, bool)
	{ 13196727585593884560ull, &invoker_1035 },		//unsigned short(const char*, char)
	{ 2612205066287292377ull, &invoker_1036 },		//unsigned short(const char*, unsigned char)
	{ 5142913784078708672ull, &invoker_1037 },		//unsigned short(const char*, short)
	{ 13202098895442236347ull, &invoker_1038 },		//unsigned short(const char*, unsigned short)
	{ 8337230931366200177ull, &invoker_1039 },		//unsigned short(const char*, int)
	{ 15561465908924568266ull, &invoker_1040 },		//unsigned short(const char*, unsigned int)
	{ 5995260148203143422ull, &invoker_1041 },		//unsigned short(const char*, int64_t)
	{ 5712293148835577927ull, &invoker_1042 },		//unsigned short(const char*, uint64_t)
	{ 4306683379031991120ull, &invoker_1043 },		//unsigned short(const char*, float)
	{ 9309061607183912111ull, &invoker_1044 },		//unsigned short(const char*, double)
	{ 5793079364121009336ull, &invoker_1045 },		//unsigned short(bool, const char*)
	{ 12620102682578733067ull, &invoker_1046 },		//unsigned short(bool, bool)
	{ 7442839684554916527ull, &invoker_1047 },		//unsigned short(bool, char)
	{ 13363257473250667892ull, &invoker_1048 },		//unsigned short(bool, unsigned char)
	{ 3256984371909592065ull, &invoker_1049 },		//unsigned short(bool, short)
	{ 17890672546750835564ull, &invoker_1050 },		//unsigned short(bool, unsigned short)
	{ 11872431321680957256ull, &invoker_1051 },		//unsigned short(bool, int)
	{ 13075136187722042509ull, &invoker_1052 },		//unsigned short(bool, unsigned int)
	{ 11275727288439337195ull, &invoker_1053 },		//unsigned short(bool, int64_t)
	{ 5962120776031704704ull, &invoker_1054 },		//unsigned short(bool, uint64_t)
	{ 2867343648017394185ull, &invoker_1055 },		//unsigned short(bool, float)
	{ 11019256498505387308ull, &invoker_1056 },		//unsigned short(bool, double)
	{ 149892310500707196ull, &invoker_1057 },		//unsigned short(char, const char*)
	{ 15764496485318430343ull, &invoker_1058 },		//unsigned short(char, bool)
	{ 218935855140714291ull, &invoker_1059 },		//unsigned short(char, char)
	{ 11407340111539741552ull, &invoker_1060 },		//unsigned short(char, unsigned char)
	{ 6274678230897813965ull, &invoker_1061 },		//unsigned short(char, short)
	{ 10057251619519364512ull, &invoker_1062 },		//unsigned short(char, unsigned short)
	{ 16484005900220659380ull, &invoker_1063 },		//unsigned short(char, int)
	{ 3292960058514989137ull, &invoker_1064 },		//unsigned short(char, unsigned int)
	{ 16219305012004034743ull, &invoker_1065 },		//unsigned short(char, int64_t)
	{ 18089522933755027980ull, &invoker_1066 },		//unsigned short(char, uint64_t)
	{ 16777312331987421317ull, &invoker_1067 },		//unsigned short(char, float)
	{ 10154915743435348600ull, &invoker_1068 },		//unsigned short(char, double)
	{ 190891972415163533ull, &invoker_1069 },		//unsigned short(unsigned char, const char*)
	{ 7585385499370957916ull, &invoker_1070 },		//unsigned short(unsigned char, bool)
	{ 13266529935192754780ull, &invoker_1071 },		//unsigned short(unsigned char, char)
	{ 6872122403914628893ull, &invoker_1072 },		//unsigned short(unsigned char, unsigned char)
	{ 7842325845302515092ull, &invoker_1073 },		//unsigned short(unsigned char, short)
	{ 8708148698309451143ull, &invoker_1074 },		//unsigned short(unsigned char, unsigned short)
	{ 4818690371895248501ull, &invoker_1075 },		//unsigned short(unsigned char, int)
	{ 12063135801575055718ull, &invoker_1076 },		//unsigned short(unsigned char, unsigned int)
	{ 10411469040112030034ull, &invoker_1077 },		//unsigned short(unsigned char, int64_t)
	{ 14461292679187054299ull, &invoker_1078 },		//unsigned short(unsigned char, uint64_t)
	{ 11173303234620778628ull, &invoker_1079 },		//unsigned short(unsigned char, float)
	{ 3673716257143619859ull, &invoker_1080 },		//unsigned short(unsigned char, double)
	{ 958421309906329174ull, &invoker_1081 },		//unsigned short(short, const char*)
	{ 10253462875959404821ull, &invoker_1082 },		//unsigned short(short, bool)
	{ 4186662385878659965ull, &invoker_1083 },		//unsigned short(short, char)
	{ 2143458170807105462ull, &invoker_1084 },		//unsigned short(short, unsigned char)
	{ 16982605016993299175ull, &invoker_1085 },		//unsigned short(short, short)
	{ 1226343385910032382ull, &invoker_1086 },		//unsigned short(short, unsigned short)
	{ 13284555506483221702ull, &invoker_1087 },		//unsigned short(short, int)
	{ 4778014545902434863ull, &invoker_1088 },		//unsigned short(short, unsigned int)
	{ 308482339253360113ull, &invoker_1089 },		//unsigned short(short, int64_t)
	{ 13870688519206810930ull, &invoker_1090 },		//unsigned short(short, uint64_t)
	{ 10153943768149345467ull, &invoker_1091 },		//unsigned short(short, float)
	{ 10929312651989465858ull, &invoker_1092 },		//unsigned short(short, double)
	{ 12282705234701681437ull, &invoker_1093 },		//unsigned short(unsigned short, const char*)
	{ 2936204440476812844ull, &invoker_1094 },		//unsigned short(unsigned short, bool)
	{ 5245637368523052108ull, &invoker_1095 },		//unsigned short(unsigned short, char)
	{ 7418173395308096109ull, &invoker_1096 },		//unsigned short(unsigned short, unsigned char)
	{ 17316530281774251620ull, &invoker_1097 },		//unsigned short(unsigned short, short)
	{ 12242419132501432119ull, &invoker_1098 },		//unsigned short(unsigned short, unsigned short)
	{ 10611359722854824965ull, &invoker_1099 },		//unsigned short(unsigned short, int)
	{ 15211561147704242134ull, &invoker_1100 },		//unsigned short(unsigned short, unsigned int)
	{ 7715593199222767458ull, &invoker_1101 },		//unsigned short(unsigned short, int64_t)
	{ 15790932429768228011ull, &invoker_1102 },		//unsigned short(unsigned short, uint64_t)
	{ 11252041393279841364ull, &invoker_1103 },		//unsigned short(unsigned short, float)
	{ 3531404192058371843ull, &invoker_1104 },		//unsigned short(unsigned short, double)
	{ 15085206735283586105ull, &invoker_1105 },		//unsigned short(int, const char*)
	{ 1125101058631084080ull, &invoker_1106 },		//unsigned short(int, bool)
	{ 7532925444181878408ull, &invoker_1107 },		//unsigned short(int, char)
	{ 14696043086306330801ull, &invoker_1108 },		//unsigned short(int, unsigned char)
	{ 16854901597436140952ull, &invoker_1109 },		//unsigned short(int, short)
	{ 3253301023780659091ull, &invoker_1110 },		//unsigned short(int, unsigned short)
	{ 4558856455629712809ull, &invoker_1111 },		//unsigned short(int, int)
	{ 17570910555968933314ull, &invoker_1112 },		//unsigned short(int, unsigned int)
	{ 15183488982939273222ull, &invoker_1113 },		//unsigned short(int, int64_t)
	{ 12785839508554341183ull, &invoker_1114 },		//unsigned short(int, uint64_t)
	{ 7142998227318786920ull, &invoker_1115 },		//unsigned short(int, float)
	{ 781857107762396343ull, &invoker_1116 },		//unsigned short(int, double)
	{ 1534207694701574178ull, &invoker_1117 },		//unsigned short(unsigned int, const char*)
	{ 12624772699997650457ull, &invoker_1118 },		//unsigned short(unsigned int, bool)
	{ 4824862621931643833ull, &invoker_1119 },		//unsigned short(unsigned int, char)
	{ 3917063776518062522ull, &invoker_1120 },		//unsigned short(unsigned int, unsigned char)
	{ 5536837269877920283ull, &invoker_1121 },		//unsigned short(unsigned int, short)
	{ 3330555664076362858ull, &invoker_1122 },		//unsigned short(unsigned int, unsigned short)
	{ 11923715219368504106ull, &invoker_1123 },		//unsigned short(unsigned int, int)
	{ 6498970457069060203ull, &invoker_1124 },		//unsigned short(unsigned int, unsigned int)
	{ 12917398015429700469ull, &invoker_1125 },		//unsigned short(unsigned int, int64_t)
	{ 3964036850395610214ull, &invoker_1126 },		//unsigned short(unsigned int, uint64_t)
	{ 6411032668730645023ull, &invoker_1127 },		//unsigned short(unsigned int, float)
	{ 5555205381162722566ull, &invoker_1128 },		//unsigned short(unsigned int, double)
	{ 7173561734582167576ull, &invoker_1129 },		//unsigned short(int64_t, const char*)
	{ 9629375498825177707ull, &invoker_1130 },		//unsigned short(int64_t, bool)
	{ 4068189798929786383ull, &invoker_1131 },		//unsigned short(int64_t, char)
	{ 1928788011016969300ull, &invoker_1132 },		//unsigned short(int64_t, unsigned char)
	{ 10806827999021812321ull, &invoker_1133 },		//unsigned short(int64_t, short)
	{ 2726818783783284172ull, &invoker_1134 },		//unsigned short(int64_t, unsigned short)
	{ 12701101230417145384ull, &invoker_1135 },		//unsigned short(int64_t, int)
	{ 14147811751111629037ull, &invoker_1136 },		//unsigned short(int64_t, unsigned int)
	{ 14368579987124869899ull, &invoker_1137 },		//unsigned short(int64_t, int64_t)
	{ 15760611602329184032ull, &invoker_1138 },		//unsigned short(int64_t, uint64_t)
	{ 16896600480496961513ull, &invoker_1139 },		//unsigned short(int64_t, float)
	{ 7565885808902897932ull, &invoker_1140 },		//unsigned short(int64_t, double)
	{ 11241589841819966961ull, &invoker_1141 },		//unsigned short(uint64_t, const char*)
	{ 677360791229834728ull, &invoker_1142 },		//unsigned short(uint64_t, bool)
	{ 9406387298356277856ull, &invoker_1143 },		//unsigned short(uint64_t, char)
	{ 5490728037859990857ull, &invoker_1144 },		//unsigned short(uint64_t, unsigned char)
	{ 3442262723017389744ull, &invoker_1145 },		//unsigned short(uint64_t, short)
	{ 4429644420415796427ull, &invoker_1146 },		//unsigned short(uint64_t, unsigned short)
	{ 12955829383542321697ull, &invoker_1147 },		//unsigned short(uint64_t, int)
	{ 12718738907677872090ull, &invoker_1148 },		//unsigned short(uint64_t, unsigned int)
	{ 14557136728091069678ull, &invoker_1149 },		//unsigned short(uint64_t, int64_t)
	{ 6245607176807015543ull, &invoker_1150 },		//unsigned short(uint64_t, uint64_t)
	{ 11585032539442030528ull, &invoker_1151 },		//unsigned short(uint64_t, float)
	{ 8941020204774094207ull, &invoker_1152 },		//unsigned short(uint64_t, double)
	{ 16080361470180695278ull, &invoker_1153 },		//unsigned short(float, const char*)
	{ 18111320255403996333ull, &invoker_1154 },		//unsigned short(float, bool)
	{ 8406044205497626389ull, &invoker_1155 },		//unsigned short(float, char)
	{ 13753858936482417966ull, &invoker_1156 },		//unsigned short(float, unsigned char)
	{ 4173992178525397919ull, &invoker_1157 },		//unsigned short(float, short)
	{ 3827577979724180086ull, &invoker_1158 },		//unsigned short(float, unsigned short)
	{ 15316255984451206238ull, &invoker_1159 },		//unsigned short(float, int)
	{ 10310767127362498663ull, &invoker_1160 },		//unsigned short(float, unsigned int)
	{ 3704227094120478777ull, &invoker_1161 },		//unsigned short(float, int64_t)
	{ 12992380589664072490ull, &invoker_1162 },		//unsigned short(float, uint64_t)
	{ 11149913619900936179ull, &invoker_1163 },		//unsigned short(float, float)
	{ 9989251627821801418ull, &invoker_1164 },		//unsigned short(float, double)
	{ 3551239048613587045ull, &invoker_1165 },		//unsigned short(double, const char*)
	{ 15864439241575422900ull, &invoker_1166 },		//unsigned short(double, bool)
	{ 5472216711667243124ull, &invoker_1167 },		//unsigned short(double, char)
	{ 9903663899554509045ull, &invoker_1168 },		//unsigned short(double, unsigned char)
	{ 10701892462939913324ull, &invoker_1169 },		//unsigned short(double, short)
	{ 13428205350534255743ull, &invoker_1170 },		//unsigned short(double, unsigned short)
	{ 7961834837259433357ull, &invoker_1171 },		//unsigned short(double, int)
	{ 8216247995338866238ull, &invoker_1172 },		//unsigned short(double, unsigned int)
	{ 12534944420830082458ull, &invoker_1173 },		//unsigned short(double, int64_t)
	{ 14927707995653988179ull, &invoker_1174 },		//unsigned short(double, uint64_t)
	{ 1419695703302794652ull, &invoker_1175 },		//unsigned short(double, float)
	{ 13704261254515116667ull, &invoker_1176 },		//unsigned short(double, double)
	{ 9613110677273296483ull, &invoker_1177 },		//int(const char*, const char*)
	{ 9754449199179584502ull, &invoker_1178 },		//int(const char*, bool)
	{ 4289286235341080810ull, &invoker_1179 },		//int(const char*, char)
	{ 4934019235445115527ull, &invoker_1180 },		//int(const char*, unsigned char)
	{ 8580970104856085690ull, &invoker_1181 },		//int(const char*, short)
	{ 3216312589932234201ull, &invoker_1182 },		//int(const char*, unsigned short)
	{ 11702209088817094267ull, &invoker_1183 },		//int(const char*, int)
	{ 9282748649221206432ull, &invoker_1184 },		//int(const char*, unsigned int)
	{ 293645252385966032ull, &invoker_1185 },		//int(const char*, int64_t)
	{ 5749029072498670477ull, &invoker_1186 },		//int(const char*, uint64_t)
	{ 2739893503409690982ull, &invoker_1187 },		//int(const char*, float)
	{ 11256875758626913409ull, &invoker_1188 },		//int(const char*, double)
	{ 8565942188991195478ull, &invoker_1189 },		//int(bool, const char*)
	{ 7638985005600815637ull, &invoker_1190 },		//int(bool, bool)
	{ 1572184515520070781ull, &invoker_1191 },		//int(bool, char)
	{ 9624411241588783798ull, &invoker_1192 },		//int(bool, unsigned char)
	{ 7823208743410851303ull, &invoker_1193 },		//int(bool, short)
	{ 14525380955494945022ull, &invoker_1194 },		//int(bool, unsigned short)
	{ 4112625777299259334ull, &invoker_1195 },		//int(bool, int)
	{ 16156758041696283439ull, &invoker_1196 },		//int(bool, unsigned int)
	{ 13953347406051340529ull, &invoker_1197 },		//int(bool, int64_t)
	{ 2715543631130187314ull, &invoker_1198 },		//int(bool, uint64_t)
	{ 994547494566897595ull, &invoker_1199 },		//int(bool, float)
	{ 12593700265359668226ull, &invoker_1200 },		//int(bool, double)
	{ 16067252850839796126ull, &invoker_1201 },		//int(char, const char*)
	{ 9146705058942500061ull, &invoker_1202 },		//int(char, bool)
	{ 5551685522398465125ull, &invoker_1203 },		//int(char, char)
	{ 6309722703977526878ull, &invoker_1204 },		//int(char, unsigned char)
	{ 6181916221584817359ull, &invoker_1205 },		//int(char, short)
	{ 6600684163276590790ull, &invoker_1206 },		//int(char, unsigned short)
	{ 11037679732538586638ull, &invoker_1207 },		//int(char, int)
	{ 9932221429859513399ull, &invoker_1208 },		//int(char, unsigned int)
	{ 6126155985224687721ull, &invoker_1209 },		//int(char, int64_t)
	{ 859564141748196698ull, &invoker_1210 },		//int(char, uint64_t)
	{ 6917452815819980195ull, &invoker_1211 },		//int(char, float)
	{ 2452098644880076890ull, &invoker_1212 },		//int(char, double)
	{ 15743186225038740995ull, &invoker_1213 },		//int(unsigned char, const char*)
	{ 4794376800281170966ull, &invoker_1214 },		//int(unsigned char, bool)
	{ 5808486304321603338ull, &invoker_1215 },		//int(unsigned char, char)
	{ 4569212238814684199ull, &invoker_1216 },		//int(unsigned char, unsigned char)
	{ 11498351315251284698ull, &invoker_1217 },		//int(unsigned char, short)
	{ 15330723663788730617ull, &invoker_1218 },		//int(unsigned char, unsigned short)
	{ 16068913161000506011ull, &invoker_1219 },		//int(unsigned char, int)
	{ 5736325755363052096ull, &invoker_1220 },		//int(unsigned char, unsigned int)
	{ 7576503866487831088ull, &invoker_1221 },		//int(unsigned char, int64_t)
	{ 15963651172028517613ull, &invoker_1222 },		//int(unsigned char, uint64_t)
	{ 6041197415676464774ull, &invoker_1223 },		//int(unsigned char, float)
	{ 13306426411426742433ull, &invoker_1224 },		//int(unsigned char, double)
	{ 7332103958802319568ull, &invoker_1225 },		//int(short, const char*)
	{ 12521004587351998883ull, &invoker_1226 },		//int(short, bool)
	{ 15391418259883002375ull, &invoker_1227 },		//int(short, char)
	{ 859139686680162764ull, &invoker_1228 },		//int(short, unsigned char)
	{ 16807721141702437977ull, &invoker_1229 },		//int(short, short)
	{ 3304259072904077028ull, &invoker_1230 },		//int(short, unsigned short)
	{ 8012359318476649504ull, &invoker_1231 },		//int(short, int)
	{ 5053392058396043397ull, &invoker_1232 },		//int(short, unsigned int)
	{ 2242851160470449523ull, &invoker_1233 },		//int(short, int64_t)
	{ 5211159530736873016ull, &invoker_1234 },		//int(short, uint64_t)
	{ 10528526180306124033ull, &invoker_1235 },		//int(short, float)
	{ 14022657714764041876ull, &invoker_1236 },		//int(short, double)
	{ 750782708330738795ull, &invoker_1237 },		//int(unsigned short, const char*)
	{ 17579356981982167422ull, &invoker_1238 },		//int(unsigned short, bool)
	{ 11997882892760536434ull, &invoker_1239 },		//int(unsigned short, char)
	{ 12638811994784562447ull, &invoker_1240 },		//int(unsigned short, unsigned char)
	{ 15279453477776964770ull, &invoker_1241 },		//int(unsigned short, short)
	{ 12827683028003282785ull, &invoker_1242 },		//int(unsigned short, unsigned short)
	{ 14850772043875127331ull, &invoker_1243 },		//int(unsigned short, int)
	{ 15469999672880659240ull, &invoker_1244 },		//int(unsigned short, unsigned int)
	{ 15385959859000819272ull, &invoker_1245 },		//int(unsigned short, int64_t)
	{ 4131440960598995445ull, &invoker_1246 },		//int(unsigned short, uint64_t)
	{ 14697086194576271054ull, &invoker_1247 },		//int(unsigned short, float)
	{ 2279778321545031961ull, &invoker_1248 },		//int(unsigned short, double)
	{ 2145106844262691155ull, &invoker_1249 },		//int(int, const char*)
	{ 11579604812964533734ull, &invoker_1250 },		//int(int, bool)
	{ 257297125401955002ull, &invoker_1251 },		//int(int, char)
	{ 9995514223803374711ull, &invoker_1252 },		//int(int, unsigned char)
	{ 5194532626797485930ull, &invoker_1253 },		//int(int, short)
	{ 11927013196003872361ull, &invoker_1254 },		//int(int, unsigned short)
	{ 9369370025136821099ull, &invoker_1255 },		//int(int, int)
	{ 15483041974142129392ull, &invoker_1256 },		//int(int, unsigned int)
	{ 9795104986687763584ull, &invoker_1257 },		//int(int, int64_t)
	{ 14192913100614203325ull, &invoker_1258 },		//int(int, uint64_t)
	{ 12380512165770136406ull, &invoker_1259 },		//int(int, float)
	{ 14317486355440221969ull, &invoker_1260 },		//int(int, double)
	{ 4597959702211786744ull, &invoker_1261 },		//int(unsigned int, const char*)
	{ 12006816580307757899ull, &invoker_1262 },		//int(unsigned int, bool)
	{ 12819059590589452783ull, &invoker_1263 },		//int(unsigned int, char)
	{ 11263378524558124852ull, &invoker_1264 },		//int(unsigned int, unsigned char)
	{ 15982008202789939009ull, &invoker_1265 },		//int(unsigned int, short)
	{ 18096622770577840428ull, &invoker_1266 },		//int(unsigned int, unsigned short)
	{ 16696597269296812168ull, &invoker_1267 },		//int(unsigned int, int)
	{ 7390953494749033037ull, &invoker_1268 },		//int(unsigned int, unsigned int)
	{ 11937458671056813099ull, &invoker_1269 },		//int(unsigned int, int64_t)
	{ 11304925429834040512ull, &invoker_1270 },		//int(unsigned int, uint64_t)
	{ 3240973171195550793ull, &invoker_1271 },		//int(unsigned int, float)
	{ 6717341085721026924ull, &invoker_1272 },		//int(unsigned int, double)
	{ 13313731567769567898ull, &invoker_1273 },		//int(int64_t, const char*)
	{ 440050718507923601ull, &invoker_1274 },		//int(int64_t, bool)
	{ 1146015368167207345ull, &invoker_1275 },		//int(int64_t, char)
	{ 2019801281962611602ull, &invoker_1276 },		//int(int64_t, unsigned char)
	{ 4953286674175117971ull, &invoker_1277 },		//int(int64_t, short)
	{ 1291897434438651458ull, &invoker_1278 },		//int(int64_t, unsigned short)
	{ 15378538606644134082ull, &invoker_1279 },		//int(int64_t, int)
	{ 18120017099234075331ull, &invoker_1280 },		//int(int64_t, unsigned int)
	{ 11293547234218822397ull, &invoker_1281 },		//int(int64_t, int64_t)
	{ 13830852653770118654ull, &invoker_1282 },		//int(int64_t, uint64_t)
	{ 1197649055184634327ull, &invoker_1283 },		//int(int64_t, float)
	{ 14373736103124361390ull, &invoker_1284 },		//int(int64_t, double)
	{ 813785129213932951ull, &invoker_1285 },		//int(uint64_t, const char*)
	{ 4424702568188865330ull, &invoker_1286 },		//int(uint64_t, bool)
	{ 13443652266091702462ull, &invoker_1287 },		//int(uint64_t, char)
	{ 9083652167120294547ull, &invoker_1288 },		//int(uint64_t, unsigned char)
	{ 442283886460299430ull, &invoker_1289 },		//int(uint64_t, short)
	{ 9892658111450857773ull, &invoker_1290 },		//int(uint64_t, unsigned short)
	{ 1381568235853155095ull, &invoker_1291 },		//int(uint64_t, int)
	{ 18270768399563842580ull, &invoker_1292 },		//int(uint64_t, unsigned int)
	{ 16495803206372538300ull, &invoker_1293 },		//int(uint64_t, int64_t)
	{ 17198072959323238617ull, &invoker_1294 },		//int(uint64_t, uint64_t)
	{ 13621003758585926274ull, &invoker_1295 },		//int(uint64_t, float)
	{ 10993615645642395405ull, &invoker_1296 },		//int(uint64_t, double)
	{ 8810381686199184348ull, &invoker_1297 },		//int(float, const char*)
	{ 5161794696647367271ull, &invoker_1298 },		//int(float, bool)
	{ 1444666200215404307ull, &invoker_1299 },		//int(float, char)
	{ 14403279354115137744ull, &invoker_1300 },		//int(float, unsigned char)
	{ 15466700741273411245ull, &invoker_1301 },		//int(float, short)
	{ 16050948853590491392ull, &invoker_1302 },		//int(float, unsigned short)
	{ 11742285265223861652ull, &invoker_1303 },		//int(float, int)
	{ 6134751540371770545ull, &invoker_1304 },		//int(float, unsigned int)
	{ 143731223842676055ull, &invoker_1305 },		//int(float, int64_t)
	{ 1295012126270186668ull, &invoker_1306 },		//int(float, uint64_t)
	{ 7277707538866754661ull, &invoker_1307 },		//int(float, float)
	{ 18358807802281670104ull, &invoker_1308 },		//int(float, double)
	{ 17085964553730851783ull, &invoker_1309 },		//int(double, const char*)
	{ 15603010151436136418ull, &invoker_1310 },		//int(double, bool)
	{ 9354965932469192142ull, &invoker_1311 },		//int(double, char)
	{ 7864150737326632515ull, &invoker_1312 },		//int(double, unsigned char)
	{ 11943959319220172310ull, &invoker_1313 },		//int(double, short)
	{ 8260577504226736637ull, &invoker_1314 },		//int(double, unsigned short)
	{ 17334961658859295239ull, &invoker_1315 },		//int(double, int)
	{ 17481424254894902372ull, &invoker_1316 },		//int(double, unsigned int)
	{ 16764411626545821676ull, &invoker_1317 },		//int(double, int64_t)
	{ 8208389167989992009ull, &invoker_1318 },		//int(double, uint64_t)
	{ 15823278431875694770ull, &invoker_1319 },		//int(double, float)
	{ 2834624068102722269ull, &invoker_1320 },		//int(double, double)
	{ 10600108971468702210ull, &invoker_1321 },		//unsigned int(const char*, const char*)
	{ 2323386436874446201ull, &invoker_1322 },		//unsigned int(const char*, bool)
	{ 12970079695029580185ull, &invoker_1323 },		//unsigned int(const char*, char)
	{ 9660401701503304218ull, &invoker_1324 },		//unsigned int(const char*, unsigned char)
	{ 9115767751231702395ull, &invoker_1325 },		//unsigned int(const char*, short)
	{ 13829124150512553674ull, &invoker_1326 },		//unsigned int(const char*, unsigned short)
	{ 15860403213329702026ull, &invoker_1327 },		//unsigned int(const char*, int)
	{ 10372860593350986187ull, &invoker_1328 },		//unsigned int(const char*, unsigned int)
	{ 2038896737314539413ull, &invoker_1329 },		//unsigned int(const char*, int64_t)
	{ 14631568899335442566ull, &invoker_1330 },		//unsigned int(const char*, uint64_t)
	{ 16218497339911771519ull, &invoker_1331 },		//unsigned int(const char*, float)
	{ 15933094265479939558ull, &invoker_1332 },		//unsigned int(const char*, double)
	{ 1898719789322880901ull, &invoker_1333 },		//unsigned int(bool, const char*)
	{ 14481069478969665364ull, &invoker_1334 },		//unsigned int(bool, bool)
	{ 16162162312593950996ull, &invoker_1335 },		//unsigned int(bool, char)
	{ 11427258832377714197ull, &invoker_1336 },		//unsigned int(bool, unsigned char)
	{ 15231843742421094540ull, &invoker_1337 },		//unsigned int(bool, short)
	{ 16098420949474240671ull, &invoker_1338 },		//unsigned int(bool, unsigned short)
	{ 773206221175078829ull, &invoker_1339 },		//unsigned int(bool, int)
	{ 16854468532355610974ull, &invoker_1340 },		//unsigned int(bool, unsigned int)
	{ 657217152167861754ull, &invoker_1341 },		//unsigned int(bool, int64_t)
	{ 5639866357732111283ull, &invoker_1342 },		//unsigned int(bool, uint64_t)
	{ 5949646982783975868ull, &invoker_1343 },		//unsigned int(bool, float)
	{ 8638617890969717659ull, &invoker_1344 },		//unsigned int(bool, double)
	{ 13056041682173614013ull, &invoker_1345 },		//unsigned int(char, const char*)
	{ 11165522734839462348ull, &invoker_1346 },		//unsigned int(char, bool)
	{ 13719979630160824940ull, &invoker_1347 },		//unsigned int(char, char)
	{ 6819221574598920333ull, &invoker_1348 },		//unsigned int(char, unsigned char)
	{ 8336667367045820932ull, &invoker_1349 },		//unsigned int(char, short)
	{ 5020801147314891095ull, &invoker_1350 },		//unsigned int(char, unsigned short)
	{ 4227889368978713125ull, &invoker_1351 },		//unsigned int(char, int)
	{ 4411040311424273270ull, &invoker_1352 },		//unsigned int(char, unsigned int)
	{ 11195015363348904642ull, &invoker_1353 },		//unsigned int(char, int64_t)
	{ 7844850201159435019ull, &invoker_1354 },		//unsigned int(char, uint64_t)
	{ 14351348890348755444ull, &invoker_1355 },		//unsigned int(char, float)
	{ 7940866151834011555ull, &invoker_1356 },		//unsigned int(char, double)
	{ 10109356405442164570ull, &invoker_1357 },		//unsigned int(unsigned char, const char*)
	{ 12659735290163564369ull, &invoker_1358 },		//unsigned int(unsigned char, bool)
	{ 13365699939822848113ull, &invoker_1359 },		//unsigned int(unsigned char, char)
	{ 6365240593361765586ull, &invoker_1360 },		//unsigned int(unsigned char, unsigned char)
	{ 4682005013064361555ull, &invoker_1361 },		//unsigned int(unsigned char, short)
	{ 9598913359426754690ull, &invoker_1362 },		//unsigned int(unsigned char, unsigned short)
	{ 13328583069077735554ull, &invoker_1363 },		//unsigned int(unsigned char, int)
	{ 3390996363153584899ull, &invoker_1364 },		//unsigned int(unsigned char, unsigned int)
	{ 16876662965726889149ull, &invoker_1365 },		//unsigned int(unsigned char, int64_t)
	{ 8113382327934100158ull, &invoker_1366 },		//unsigned int(unsigned char, uint64_t)
	{ 13389290821993446039ull, &invoker_1367 },		//unsigned int(unsigned char, float)
	{ 13590722063337399150ull, &invoker_1368 },		//unsigned int(unsigned char, double)
	{ 13544029017890241133ull, &invoker_1369 },		//unsigned int(short, const char*)
	{ 224434855961088316ull, &invoker_1370 },		//unsigned int(short, bool)
	{ 5521656589911310396ull, &invoker_1371 },		//unsigned int(short, char)
	{ 8731003530725011197ull, &invoker_1372 },		//unsigned int(short, unsigned char)
	{ 3849000290981877364ull, &invoker_1373 },		//unsigned int(short, short)
	{ 15518564068996814183ull, &invoker_1374 },		//unsigned int(short, unsigned short)
	{ 13773975627513673685ull, &invoker_1375 },		//unsigned int(short, int)
	{ 4434057087359150918ull, &invoker_1376 },		//unsigned int(short, unsigned int)
	{ 6847073662998738418ull, &invoker_1377 },		//unsigned int(short, int64_t)
	{ 12452651698907908859ull, &invoker_1378 },		//unsigned int(short, uint64_t)
	{ 1196016297021746404ull, &invoker_1379 },		//unsigned int(short, float)
	{ 3160337716679534835ull, &invoker_1380 },		//unsigned int(short, double)
	{ 9773487656875610228ull, &invoker_1381 },		//unsigned int(unsigned short, const char*)
	{ 8646255210974051679ull, &invoker_1382 },		//unsigned int(unsigned short, bool)
	{ 13635437643659433387ull, &invoker_1383 },		//unsigned int(unsigned short, char)
	{ 17055605745855987080ull, &invoker_1384 },		//unsigned int(unsigned short, unsigned char)
	{ 633011936115495909ull, &invoker_1385 },		//unsigned int(unsigned short, short)
	{ 6764335126464590488ull, &invoker_1386 },		//unsigned int(unsigned short, unsigned short)
	{ 13389611178748674764ull, &invoker_1387 },		//unsigned int(unsigned short, int)
	{ 2992324850795887273ull, &invoker_1388 },		//unsigned int(unsigned short, unsigned int)
	{ 2844413797652609215ull, &invoker_1389 },		//unsigned int(unsigned short, int64_t)
	{ 7766813891624375908ull, &invoker_1390 },		//unsigned int(unsigned short, uint64_t)
	{ 10595820505185678141ull, &invoker_1391 },		//unsigned int(unsigned short, float)
	{ 12895670002302468320ull, &invoker_1392 },		//unsigned int(unsigned short, double)
	{ 7736303817255375090ull, &invoker_1393 },		//unsigned int(int, const char*)
	{ 9233407189588382313ull, &invoker_1394 },		//unsigned int(int, bool)
	{ 13961805285316968681ull, &invoker_1395 },		//unsigned int(int, char)
	{ 12410115573473638602ull, &invoker_1396 },		//unsigned int(int, unsigned char)
	{ 4101050519594320107ull, &invoker_1397 },		//unsigned int(int, short)
	{ 11384244598057550490ull, &invoker_1398 },		//unsigned int(int, unsigned short)
	{ 10514213584457676410ull, &invoker_1399 },		//unsigned int(int, int)
	{ 17173670704909871707ull, &invoker_1400 },		//unsigned int(int, unsigned int)
	{ 15714719760095557125ull, &invoker_1401 },		//unsigned int(int, int64_t)
	{ 18271021941105540278ull, &invoker_1402 },		//unsigned int(int, uint64_t)
	{ 1548423769861730223ull, &invoker_1403 },		//unsigned int(int, float)
	{ 16556305098389260598ull, &invoker_1404 },		//unsigned int(int, double)
	{ 714860826744221191ull, &invoker_1405 },		//unsigned int(unsigned int, const char*)
	{ 15379362539364099362ull, &invoker_1406 },		//unsigned int(unsigned int, bool)
	{ 9515241022268729870ull, &invoker_1407 },		//unsigned int(unsigned int, char)
	{ 657659018762877955ull, &invoker_1408 },		//unsigned int(unsigned int, unsigned char)
	{ 11651615940969428822ull, &invoker_1409 },		//unsigned int(unsigned int, short)
	{ 6824166338808558781ull, &invoker_1410 },		//unsigned int(unsigned int, unsigned short)
	{ 6783354627307077959ull, &invoker_1411 },		//unsigned int(unsigned int, int)
	{ 14539149271921026340ull, &invoker_1412 },		//unsigned int(unsigned int, unsigned int)
	{ 5000897888994906412ull, &invoker_1413 },		//unsigned int(unsigned int, int64_t)
	{ 15753606895123360905ull, &invoker_1414 },		//unsigned int(unsigned int, uint64_t)
	{ 2789932681535658226ull, &invoker_1415 },		//unsigned int(unsigned int, float)
	{ 10929194858416907549ull, &invoker_1416 },		//unsigned int(unsigned int, double)
	{ 4761305587843069779ull, &invoker_1417 },		//unsigned int(int64_t, const char*)
	{ 10619434303019485158ull, &invoker_1418 },		//unsigned int(int64_t, bool)
	{ 17743870689166458042ull, &invoker_1419 },		//unsigned int(int64_t, char)
	{ 16129136651261678199ull, &invoker_1420 },		//unsigned int(int64_t, unsigned char)
	{ 10314353168569570666ull, &invoker_1421 },		//unsigned int(int64_t, short)
	{ 5668380469922402409ull, &invoker_1422 },		//unsigned int(int64_t, unsigned short)
	{ 15919968783736953195ull, &invoker_1423 },		//unsigned int(int64_t, int)
	{ 8572043815811155696ull, &invoker_1424 },		//unsigned int(int64_t, unsigned int)
	{ 14130908460095609472ull, &invoker_1425 },		//unsigned int(int64_t, int64_t)
	{ 7253067111737362877ull, &invoker_1426 },		//unsigned int(int64_t, uint64_t)
	{ 17500332707542221142ull, &invoker_1427 },		//unsigned int(int64_t, float)
	{ 10731654245885378833ull, &invoker_1428 },		//unsigned int(int64_t, double)
	{ 1766973767874835944ull, &invoker_1429 },		//unsigned int(uint64_t, const char*)
	{ 16290390168176901371ull, &invoker_1430 },		//unsigned int(uint64_t, bool)
	{ 4810838937110756927ull, &invoker_1431 },		//unsigned int(uint64_t, char)
	{ 2856496490961963940ull, &invoker_1432 },		//unsigned int(uint64_t, unsigned char)
	{ 7218515930734584177ull, &invoker_1433 },		//unsigned int(uint64_t, short)
	{ 15946517508511214908ull, &invoker_1434 },		//unsigned int(uint64_t, unsigned short)
	{ 2512389563276621560ull, &invoker_1435 },		//unsigned int(uint64_t, int)
	{ 11710418383312719645ull, &invoker_1436 },		//unsigned int(uint64_t, unsigned int)
	{ 3034058881067472347ull, &invoker_1437 },		//unsigned int(uint64_t, int64_t)
	{ 10129636198477266672ull, &invoker_1438 },		//unsigned int(uint64_t, uint64_t)
	{ 15837390155229587577ull, &invoker_1439 },		//unsigned int(uint64_t, float)
	{ 5081747509362638204ull, &invoker_1440 },		//unsigned int(uint64_t, double)
	{ 17760791249027964349ull, &invoker_1441 },		//unsigned int(float, const char*)
	{ 11447418776630307788ull, &invoker_1442 },		//unsigned int(float, bool)
	{ 14001875671951670380ull, &invoker_1443 },		//unsigned int(float, char)
	{ 5092674963212451469ull, &invoker_1444 },		//unsigned int(float, unsigned char)
	{ 11648143568090458116ull, &invoker_1445 },		//unsigned int(float, short)
	{ 13151006829533080407ull, &invoker_1446 },		//unsigned int(float, unsigned short)
	{ 9464056091633152037ull, &invoker_1447 },		//unsigned int(float, int)
	{ 13099959357777493366ull, &invoker_1448 },		//unsigned int(float, unsigned int)
	{ 13307221241850568898ull, &invoker_1449 },		//unsigned int(float, int64_t)
	{ 15082495623181554955ull, &invoker_1450 },		//unsigned int(float, uint64_t)
	{ 17662825091393392628ull, &invoker_1451 },		//unsigned int(float, float)
	{ 17438438857273199011ull, &invoker_1452 },		//unsigned int(float, double)
	{ 1904685191911116864ull, &invoker_1453 },		//unsigned int(double, const char*)
	{ 3216488712583116499ull, &invoker_1454 },		//unsigned int(double, bool)
	{ 3509497220507174423ull, &invoker_1455 },		//unsigned int(double, char)
	{ 14396874726244254716ull, &invoker_1456 },		//unsigned int(double, unsigned char)
	{ 7525700364455984009ull, &invoker_1457 },		//unsigned int(double, short)
	{ 7711477812595535156ull, &invoker_1458 },		//unsigned int(double, unsigned short)
	{ 15287983480067427984ull, &invoker_1459 },		//unsigned int(double, int)
	{ 8549306599473141397ull, &invoker_1460 },		//unsigned int(double, unsigned int)
	{ 11085415008591335075ull, &invoker_1461 },		//unsigned int(double, int64_t)
	{ 18426688817216964264ull, &invoker_1462 },		//unsigned int(double, uint64_t)
	{ 846395866827900657ull, &invoker_1463 },		//unsigned int(double, float)
	{ 12353592851804711588ull, &invoker_1464 },		//unsigned int(double, double)
	{ 8627727908509338142ull, &invoker_1465 },		//int64_t(const char*, const char*)
	{ 11119388645373449821ull, &invoker_1466 },		//int64_t(const char*, bool)
	{ 7524369108829414885ull, &invoker_1467 },		//int64_t(const char*, char)
	{ 9340942327558724318ull, &invoker_1468 },		//int64_t(const char*, unsigned char)
	{ 5794264164571173199ull, &invoker_1469 },		//int64_t(const char*, short)
	{ 10860979005941863494ull, &invoker_1470 },		//int64_t(const char*, unsigned short)
	{ 5011407816929621646ull, &invoker_1471 },		//int64_t(const char*, int)
	{ 15470556431528000951ull, &invoker_1472 },		//int64_t(const char*, unsigned int)
	{ 5615148153154611433ull, &invoker_1473 },		//int64_t(const char*, int64_t)
	{ 312780981780793050ull, &invoker_1474 },		//int64_t(const char*, uint64_t)
	{ 6529800758806336035ull, &invoker_1475 },		//int64_t(const char*, float)
	{ 4497635559799752154ull, &invoker_1476 },		//int64_t(const char*, double)
	{ 4444473080202037545ull, &invoker_1477 },		//int64_t(bool, const char*)
	{ 5767860348483820064ull, &invoker_1478 },		//int64_t(bool, bool)
	{ 15704456987236332760ull, &invoker_1479 },		//int64_t(bool, char)
	{ 15942739907984093025ull, &invoker_1480 },		//int64_t(bool, unsigned char)
	{ 16137175790510925448ull, &invoker_1481 },		//int64_t(bool, short)
	{ 3778855105215904163ull, &invoker_1482 },		//int64_t(bool, unsigned short)
	{ 16873619668725564825ull, &invoker_1483 },		//int64_t(bool, int)
	{ 13375785164650544722ull, &invoker_1484 },		//int64_t(bool, unsigned int)
	{ 3805534008595016310ull, &invoker_1485 },		//int64_t(bool, int64_t)
	{ 16494518362238571375ull, &invoker_1486 },		//int64_t(bool, uint64_t)
	{ 15092797200168225880ull, &invoker_1487 },		//int64_t(bool, float)
	{ 14546010900398592455ull, &invoker_1488 },		//int64_t(bool, double)
	{ 11994228272899069481ull, &invoker_1489 },		//int64_t(char, const char*)
	{ 11973529294836306208ull, &invoker_1490 },		//int64_t(char, bool)
	{ 3463381859879267288ull, &invoker_1491 },		//int64_t(char, char)
	{ 3369708388914889825ull, &invoker_1492 },		//int64_t(char, unsigned char)
	{ 4163442524371180424ull, &invoker_1493 },		//int64_t(char, short)
	{ 14856369839232608419ull, &invoker_1494 },		//int64_t(char, unsigned short)
	{ 16737073870103442073ull, &invoker_1495 },		//int64_t(char, int)
	{ 11552549844966937938ull, &invoker_1496 },		//int64_t(char, unsigned int)
	{ 5961926272839919478ull, &invoker_1497 },		//int64_t(char, int64_t)
	{ 8534199955413891695ull, &invoker_1498 },		//int64_t(char, uint64_t)
	{ 3119063934028480856ull, &invoker_1499 },		//int64_t(char, float)
	{ 16489597584453705927ull, &invoker_1500 },		//int64_t(char, double)
	{ 7673387847926650606ull, &invoker_1501 },		//int64_t(unsigned char, const char*)
	{ 281725529860686509ull, &invoker_1502 },		//int64_t(unsigned char, bool)
	{ 9023193553663868181ull, &invoker_1503 },		//int64_t(unsigned char, char)
	{ 9557552586941454126ull, &invoker_1504 },		//int64_t(unsigned char, unsigned char)
	{ 10924717734760263071ull, &invoker_1505 },		//int64_t(unsigned char, short)
	{ 2719238937393571958ull, &invoker_1506 },		//int64_t(unsigned char, unsigned short)
	{ 11157097968694654558ull, &invoker_1507 },		//int64_t(unsigned char, int)
	{ 14377790476035374695ull, &invoker_1508 },		//int64_t(unsigned char, unsigned int)
	{ 18295803579112034873ull, &invoker_1509 },		//int64_t(unsigned char, int64_t)
	{ 12151507161481699626ull, &invoker_1510 },		//int64_t(unsigned char, uint64_t)
	{ 17900639176135801331ull, &invoker_1511 },		//int64_t(unsigned char, float)
	{ 4860449936875707850ull, &invoker_1512 },		//int64_t(unsigned char, double)
	{ 5878122723375926401ull, &invoker_1513 },		//int64_t(short, const char*)
	{ 346426319453369272ull, &invoker_1514 },		//int64_t(short, bool)
	{ 3157087295409059280ull, &invoker_1515 },		//int64_t(short, char)
	{ 7624365450505484441ull, &invoker_1516 },		//int64_t(short, unsigned char)
	{ 12440565816535871488ull, &invoker_1517 },		//int64_t(short, short)
	{ 15317626391830735483ull, &invoker_1518 },		//int64_t(short, unsigned short)
	{ 888145005019964337ull, &invoker_1519 },		//int64_t(short, int)
	{ 1176175406097054090ull, &invoker_1520 },		//int64_t(short, unsigned int)
	{ 7506646828616375102ull, &invoker_1521 },		//int64_t(short, int64_t)
	{ 3546856472301015175ull, &invoker_1522 },		//int64_t(short, uint64_t)
	{ 11988258113360728720ull, &invoker_1523 },		//int64_t(short, float)
	{ 10741980512131771631ull, &invoker_1524 },		//int64_t(short, double)
	{ 16197649321370367296ull, &invoker_1525 },		//int64_t(unsigned short, const char*)
	{ 12555304837205947859ull, &invoker_1526 },		//int64_t(unsigned short, bool)
	{ 12848313345130005783ull, &invoker_1527 },		//int64_t(unsigned short, char)
	{ 2814692921628487932ull, &invoker_1528 },		//int64_t(unsigned short, unsigned char)
	{ 8564289137697622153ull, &invoker_1529 },		//int64_t(unsigned short, short)
	{ 3292477878768198708ull, &invoker_1530 },		//int64_t(unsigned short, unsigned short)
	{ 11556656160114512784ull, &invoker_1531 },		//int64_t(unsigned short, int)
	{ 6095686525502829973ull, &invoker_1532 },		//int64_t(unsigned short, unsigned int)
	{ 17724631671870628771ull, &invoker_1533 },		//int64_t(unsigned short, int64_t)
	{ 3273370131594622376ull, &invoker_1534 },		//int64_t(unsigned short, uint64_t)
	{ 1884984640069538801ull, &invoker_1535 },		//int64_t(unsigned short, float)
	{ 17296213358913929636ull, &invoker_1536 },		//int64_t(unsigned short, double)
	{ 592882708115106758ull, &invoker_1537 },		//int64_t(int, const char*)
	{ 175082076077702341ull, &invoker_1538 },		//int64_t(int, bool)
	{ 15865445991291183117ull, &invoker_1539 },		//int64_t(int, char)
	{ 13464359811368044646ull, &invoker_1540 },		//int64_t(int, unsigned char)
	{ 43809475011844055ull, &invoker_1541 },		//int64_t(int, short)
	{ 16420686048754496910ull, &invoker_1542 },		//int64_t(int, unsigned short)
	{ 1969695989462652406ull, &invoker_1543 },		//int64_t(int, int)
	{ 18294597410533332607ull, &invoker_1544 },		//int64_t(int, unsigned int)
	{ 12251456841025879457ull, &invoker_1545 },		//int64_t(int, int64_t)
	{ 4381547439784759010ull, &invoker_1546 },		//int64_t(int, uint64_t)
	{ 8288459451416008043ull, &invoker_1547 },		//int64_t(int, float)
	{ 17807266086378770386ull, &invoker_1548 },		//int64_t(int, double)
	{ 9092507936504603779ull, &invoker_1549 },		//int64_t(unsigned int, const char*)
	{ 16667250491492327318ull, &invoker_1550 },		//int64_t(unsigned int, bool)
	{ 17681359995532759690ull, &invoker_1551 },		//int64_t(unsigned int, char)
	{ 9110018460765568679ull, &invoker_1552 },		//int64_t(unsigned int, unsigned char)
	{ 5979199740459652442ull, &invoker_1553 },		//int64_t(unsigned int, short)
	{ 3240445733253836921ull, &invoker_1554 },		//int64_t(unsigned int, unsigned short)
	{ 1880274924137093403ull, &invoker_1555 },		//int64_t(unsigned int, int)
	{ 18420083009433372096ull, &invoker_1556 },		//int64_t(unsigned int, unsigned int)
	{ 10133993378878744752ull, &invoker_1557 },		//int64_t(unsigned int, int64_t)
	{ 405028586221686893ull, &invoker_1558 },		//int64_t(unsigned int, uint64_t)
	{ 522045840884832518ull, &invoker_1559 },		//int64_t(unsigned int, float)
	{ 10681277236130256929ull, &invoker_1560 },		//int64_t(unsigned int, double)
	{ 8659568533188841991ull, &invoker_1561 },		//int64_t(int64_t, const char*)
	{ 3992372794410684706ull, &invoker_1562 },		//int64_t(int64_t, bool)
	{ 16574995351024866830ull, &invoker_1563 },		//int64_t(int64_t, char)
	{ 16914956544241025027ull, &invoker_1564 },		//int64_t(int64_t, unsigned char)
	{ 2699391885710506838ull, &invoker_1565 },		//int64_t(int64_t, short)
	{ 12944174049081311421ull, &invoker_1566 },		//int64_t(int64_t, unsigned short)
	{ 2134204150859703623ull, &invoker_1567 },		//int64_t(int64_t, int)
	{ 1392356109509071140ull, &invoker_1568 },		//int64_t(int64_t, unsigned int)
	{ 2789368988454565164ull, &invoker_1569 },		//int64_t(int64_t, int64_t)
	{ 8962149224518703241ull, &invoker_1570 },		//int64_t(int64_t, uint64_t)
	{ 12284452699986287858ull, &invoker_1571 },		//int64_t(int64_t, float)
	{ 1319736906878234909ull, &invoker_1572 },		//int64_t(int64_t, double)
	{ 9045578201343797516ull, &invoker_1573 },		//int64_t(uint64_t, const char*)
	{ 17289429657934498455ull, &invoker_1574 },		//int64_t(uint64_t, bool)
	{ 10645803531789436259ull, &invoker_1575 },		//int64_t(uint64_t, char)
	{ 537339991853644032ull, &invoker_1576 },		//int64_t(uint64_t, unsigned char)
	{ 2323746593537500189ull, &invoker_1577 },		//int64_t(uint64_t, short)
	{ 8463251416697774416ull, &invoker_1578 },		//int64_t(uint64_t, unsigned short)
	{ 7473899518755456644ull, &invoker_1579 },		//int64_t(uint64_t, int)
	{ 16603428323285599681ull, &invoker_1580 },		//int64_t(uint64_t, unsigned int)
	{ 4408926628925394503ull, &invoker_1581 },		//int64_t(uint64_t, int64_t)
	{ 12162179910094287132ull, &invoker_1582 },		//int64_t(uint64_t, uint64_t)
	{ 351449611359315029ull, &invoker_1583 },		//int64_t(uint64_t, float)
	{ 143384633801731112ull, &invoker_1584 },		//int64_t(uint64_t, double)
	{ 11363336644512117937ull, &invoker_1585 },		//int64_t(float, const char*)
	{ 3168620022392277928ull, &invoker_1586 },		//int64_t(float, bool)
	{ 12281569231390295840ull, &invoker_1587 },		//int64_t(float, char)
	{ 819133638022925449ull, &invoker_1588 },		//int64_t(float, unsigned char)
	{ 13569307932284756080ull, &invoker_1589 },		//int64_t(float, short)
	{ 1439202104150089995ull, &invoker_1590 },		//int64_t(float, unsigned short)
	{ 13659514871654903521ull, &invoker_1591 },		//int64_t(float, int)
	{ 7802558379490237722ull, &invoker_1592 },		//int64_t(float, unsigned int)
	{ 10214032473898322862ull, &invoker_1593 },		//int64_t(float, int64_t)
	{ 9897137851875531575ull, &invoker_1594 },		//int64_t(float, uint64_t)
	{ 9883645614963643776ull, &invoker_1595 },		//int64_t(float, float)
	{ 5060030333959179839ull, &invoker_1596 },		//int64_t(float, double)
	{ 12411857122697376932ull, &invoker_1597 },		//int64_t(double, const char*)
	{ 17193180349932167183ull, &invoker_1598 },		//int64_t(double, bool)
	{ 747829903004014459ull, &invoker_1599 },		//int64_t(double, char)
	{ 18086808297934121912ull, &invoker_1600 },		//int64_t(double, unsigned char)
	{ 9450451164047846229ull, &invoker_1601 },		//int64_t(double, short)
	{ 12890704725077552872ull, &invoker_1602 },		//int64_t(double, unsigned short)
	{ 825271377039927996ull, &invoker_1603 },		//int64_t(double, int)
	{ 8079510680909753337ull, &invoker_1604 },		//int64_t(double, unsigned int)
	{ 8392706317978948655ull, &invoker_1605 },		//int64_t(double, int64_t)
	{ 8762107199301506900ull, &invoker_1606 },		//int64_t(double, uint64_t)
	{ 4636644485532740589ull, &invoker_1607 },		//int64_t(double, float)
	{ 10437503248285498096ull, &invoker_1608 },		//int64_t(double, double)
	{ 11724495466800966485ull, &invoker_1609 },		//uint64_t(const char*, const char*)
	{ 7643259027591659940ull, &invoker_1610 },		//uint64_t(const char*, bool)
	{ 12824275189275062980ull, &invoker_1611 },		//uint64_t(const char*, char)
	{ 5963210671590619749ull, &invoker_1612 },		//uint64_t(const char*, unsigned char)
	{ 10755864768237857244ull, &invoker_1613 },		//uint64_t(const char*, short)
	{ 14341734106664150735ull, &invoker_1614 },		//uint64_t(const char*, unsigned short)
	{ 11067939317954152509ull, &invoker_1615 },		//uint64_t(const char*, int)
	{ 4961876083605114894ull, &invoker_1616 },		//uint64_t(const char*, unsigned int)
	{ 15403657488917093770ull, &invoker_1617 },		//uint64_t(const char*, int64_t)
	{ 18172467290640468483ull, &invoker_1618 },		//uint64_t(const char*, uint64_t)
	{ 10936835629298211340ull, &invoker_1619 },		//uint64_t(const char*, float)
	{ 14913730749542638283ull, &invoker_1620 },		//uint64_t(const char*, double)
	{ 9362838829134344212ull, &invoker_1621 },		//uint64_t(bool, const char*)
	{ 11345876419132339839ull, &invoker_1622 },		//uint64_t(bool, bool)
	{ 16579942081604433867ull, &invoker_1623 },		//uint64_t(bool, char)
	{ 6272196983194370856ull, &invoker_1624 },		//uint64_t(bool, unsigned char)
	{ 1735322636870957829ull, &invoker_1625 },		//uint64_t(bool, short)
	{ 8375952604878488760ull, &invoker_1626 },		//uint64_t(bool, unsigned short)
	{ 16781794958565480428ull, &invoker_1627 },		//uint64_t(bool, int)
	{ 13407508373475348041ull, &invoker_1628 },		//uint64_t(bool, unsigned int)
	{ 9479441364614395807ull, &invoker_1629 },		//uint64_t(bool, int64_t)
	{ 1846776900688127300ull, &invoker_1630 },		//uint64_t(bool, uint64_t)
	{ 11698131205941140061ull, &invoker_1631 },		//uint64_t(bool, float)
	{ 4669168753104800000ull, &invoker_1632 },		//uint64_t(bool, double)
	{ 14535579600248521888ull, &invoker_1633 },		//uint64_t(char, const char*)
	{ 6305627409481839411ull, &invoker_1634 },		//uint64_t(char, bool)
	{ 6214853953022733559ull, &invoker_1635 },		//uint64_t(char, char)
	{ 12802890188958034012ull, &invoker_1636 },		//uint64_t(char, unsigned char)
	{ 3340054780656556009ull, &invoker_1637 },		//uint64_t(char, short)
	{ 7730585405094219668ull, &invoker_1638 },		//uint64_t(char, unsigned short)
	{ 13303275746000028272ull, &invoker_1639 },		//uint64_t(char, int)
	{ 8559622757232111733ull, &invoker_1640 },		//uint64_t(char, unsigned int)
	{ 8726927959657426627ull, &invoker_1641 },		//uint64_t(char, int64_t)
	{ 14110841618735138632ull, &invoker_1642 },		//uint64_t(char, uint64_t)
	{ 2644401243069104721ull, &invoker_1643 },		//uint64_t(char, float)
	{ 3112173542161841028ull, &invoker_1644 },		//uint64_t(char, double)
	{ 16899356802231838521ull, &invoker_1645 },		//uint64_t(unsigned char, const char*)
	{ 13749470730239082800ull, &invoker_1646 },		//uint64_t(unsigned char, bool)
	{ 1710551042080325512ull, &invoker_1647 },		//uint64_t(unsigned char, char)
	{ 12266450645643289521ull, &invoker_1648 },		//uint64_t(unsigned char, unsigned char)
	{ 434300557650368664ull, &invoker_1649 },		//uint64_t(unsigned char, short)
	{ 3473093696131711123ull, &invoker_1650 },		//uint64_t(unsigned char, unsigned short)
	{ 17069038177064022185ull, &invoker_1651 },		//uint64_t(unsigned char, int)
	{ 8013640189231400642ull, &invoker_1652 },		//uint64_t(unsigned char, unsigned int)
	{ 4270265466082949894ull, &invoker_1653 },		//uint64_t(unsigned char, int64_t)
	{ 12612188126010950719ull, &invoker_1654 },		//uint64_t(unsigned char, uint64_t)
	{ 9169141261242566248ull, &invoker_1655 },		//uint64_t(unsigned char, float)
	{ 18092044982419488183ull, &invoker_1656 },		//uint64_t(unsigned char, double)
	{ 16199093982567097810ull, &invoker_1657 },		//uint64_t(short, const char*)
	{ 10337845673922838857ull, &invoker_1658 },		//uint64_t(short, bool)
	{ 8831854531559201481ull, &invoker_1659 },		//uint64_t(short, char)
	{ 563637191826126378ull, &invoker_1660 },		//uint64_t(short, unsigned char)
	{ 11370851571784217931ull, &invoker_1661 },		//uint64_t(short, short)
	{ 2460851120202909178ull, &invoker_1662 },		//uint64_t(short, unsigned short)
	{ 2194780077129866330ull, &invoker_1663 },		//uint64_t(short, int)
	{ 6733884321890965179ull, &invoker_1664 },		//uint64_t(short, unsigned int)
	{ 13620714190611994405ull, &invoker_1665 },		//uint64_t(short, int64_t)
	{ 8058109931201685206ull, &invoker_1666 },		//uint64_t(short, uint64_t)
	{ 9202288261411613839ull, &invoker_1667 },		//uint64_t(short, float)
	{ 15776920896368787734ull, &invoker_1668 },		//uint64_t(short, double)
	{ 199432498687612529ull, &invoker_1669 },		//uint64_t(unsigned short, const char*)
	{ 15822836252241704808ull, &invoker_1670 },		//uint64_t(unsigned short, bool)
	{ 6105118685658596320ull, &invoker_1671 },		//uint64_t(unsigned short, char)
	{ 9520392657539721673ull, &invoker_1672 },		//uint64_t(unsigned short, unsigned char)
	{ 6385494949039239984ull, &invoker_1673 },		//uint64_t(unsigned short, short)
	{ 4338139062106239563ull, &invoker_1674 },		//uint64_t(unsigned short, unsigned short)
	{ 11498821103582288545ull, &invoker_1675 },		//uint64_t(unsigned short, int)
	{ 17060857793330254170ull, &invoker_1676 },		//uint64_t(unsigned short, unsigned int)
	{ 16447912634061667694ull, &invoker_1677 },		//uint64_t(unsigned short, int64_t)
	{ 3146894120828292599ull, &invoker_1678 },		//uint64_t(unsigned short, uint64_t)
	{ 14528264765463880768ull, &invoker_1679 },		//uint64_t(unsigned short, float)
	{ 7467556216688853759ull, &invoker_1680 },		//uint64_t(unsigned short, double)
	{ 371201820365185829ull, &invoker_1681 },		//uint64_t(int, const char*)
	{ 10830734052498233460ull, &invoker_1682 },		//uint64_t(int, bool)
	{ 12511826886122519092ull, &invoker_1683 },		//uint64_t(int, char)
	{ 17539899335116486453ull, &invoker_1684 },		//uint64_t(int, unsigned char)
	{ 16331525156364231212ull, &invoker_1685 },		//uint64_t(int, short)
	{ 7998877033180830143ull, &invoker_1686 },		//uint64_t(int, unsigned short)
	{ 12317199368965395277ull, &invoker_1687 },		//uint64_t(int, int)
	{ 12408604331714675582ull, &invoker_1688 },		//uint64_t(int, unsigned int)
	{ 3586080535577863514ull, &invoker_1689 },		//uint64_t(int, int64_t)
	{ 7052145906124711955ull, &invoker_1690 },		//uint64_t(int, uint64_t)
	{ 13661785288426031708ull, &invoker_1691 },		//uint64_t(int, float)
	{ 16565436338398108731ull, &invoker_1692 },		//uint64_t(int, double)
	{ 3496487475469626486ull, &invoker_1693 },		//uint64_t(unsigned int, const char*)
	{ 4281891162128729013ull, &invoker_1694 },		//uint64_t(unsigned int, bool)
	{ 10811368209536886813ull, &invoker_1695 },		//uint64_t(unsigned int, char)
	{ 1797771774773971286ull, &invoker_1696 },		//uint64_t(unsigned int, unsigned char)
	{ 7879322869145847943ull, &invoker_1697 },		//uint64_t(unsigned int, short)
	{ 6986088634925246878ull, &invoker_1698 },		//uint64_t(unsigned int, unsigned short)
	{ 16005053738652767334ull, &invoker_1699 },		//uint64_t(unsigned int, int)
	{ 17085060454512181967ull, &invoker_1700 },		//uint64_t(unsigned int, unsigned int)
	{ 11222679490755721937ull, &invoker_1701 },		//uint64_t(unsigned int, int64_t)
	{ 15534764390768163730ull, &invoker_1702 },		//uint64_t(unsigned int, uint64_t)
	{ 6895583531495426267ull, &invoker_1703 },		//uint64_t(unsigned int, float)
	{ 948373606164797730ull, &invoker_1704 },		//uint64_t(unsigned int, double)
	{ 7816136505210949732ull, &invoker_1705 },		//uint64_t(int64_t, const char*)
	{ 3010708302359280335ull, &invoker_1706 },		//uint64_t(int64_t, bool)
	{ 4873062457055816763ull, &invoker_1707 },		//uint64_t(int64_t, char)
	{ 12737295175560103672ull, &invoker_1708 },		//uint64_t(int64_t, unsigned char)
	{ 17206706241723957781ull, &invoker_1709 },		//uint64_t(int64_t, short)
	{ 3139269424561512488ull, &invoker_1710 },		//uint64_t(int64_t, unsigned short)
	{ 1992634178645231996ull, &invoker_1711 },		//uint64_t(int64_t, int)
	{ 13721578533209768249ull, &invoker_1712 },		//uint64_t(int64_t, unsigned int)
	{ 11178877304427877615ull, &invoker_1713 },		//uint64_t(int64_t, int64_t)
	{ 6076877868552440084ull, &invoker_1714 },		//uint64_t(int64_t, uint64_t)
	{ 12392899563208852141ull, &invoker_1715 },		//uint64_t(int64_t, float)
	{ 12932073709512910512ull, &invoker_1716 },		//uint64_t(int64_t, double)
	{ 12201384861939830205ull, &invoker_1717 },		//uint64_t(uint64_t, const char*)
	{ 15911395551674072012ull, &invoker_1718 },		//uint64_t(uint64_t, bool)
	{ 19108373285882988ull, &invoker_1719 },		//uint64_t(uint64_t, char)
	{ 13942390773063757453ull, &invoker_1720 },		//uint64_t(uint64_t, unsigned char)
	{ 17997554054501423108ull, &invoker_1721 },		//uint64_t(uint64_t, short)
	{ 13780466182284147543ull, &invoker_1722 },		//uint64_t(uint64_t, unsigned short)
	{ 77852548123287589ull, &invoker_1723 },		//uint64_t(uint64_t, int)
	{ 3422873280628886902ull, &invoker_1724 },		//uint64_t(uint64_t, unsigned int)
	{ 11251764768582996162ull, &invoker_1725 },		//uint64_t(uint64_t, int64_t)
	{ 17639126360135279883ull, &invoker_1726 },		//uint64_t(uint64_t, uint64_t)
	{ 5565491504094806004ull, &invoker_1727 },		//uint64_t(uint64_t, float)
	{ 6254961499740019107ull, &invoker_1728 },		//uint64_t(uint64_t, double)
	{ 7732329665595072410ull, &invoker_1729 },		//uint64_t(float, const char*)
	{ 11411280247974879121ull, &invoker_1730 },		//uint64_t(float, bool)
	{ 12117244897634162865ull, &invoker_1731 },		//uint64_t(float, char)
	{ 5693650779532507282ull, &invoker_1732 },		//uint64_t(float, unsigned char)
	{ 2570654991607287699ull, &invoker_1733 },		//uint64_t(float, short)
	{ 11169384464492965186ull, &invoker_1734 },		//uint64_t(float, unsigned short)
	{ 17274691640703385026ull, &invoker_1735 },		//uint64_t(float, int)
	{ 10416763379538733507ull, &invoker_1736 },		//uint64_t(float, unsigned int)
	{ 1498216212792416253ull, &invoker_1737 },		//uint64_t(float, int64_t)
	{ 5110242475674561790ull, &invoker_1738 },		//uint64_t(float, uint64_t)
	{ 17261761446326355671ull, &invoker_1739 },		//uint64_t(float, float)
	{ 10083338560281501614ull, &invoker_1740 },		//uint64_t(float, double)
	{ 7180303195021264865ull, &invoker_1741 },		//uint64_t(double, const char*)
	{ 1789836797011425048ull, &invoker_1742 },		//uint64_t(double, bool)
	{ 4984420474838689840ull, &invoker_1743 },		//uint64_t(double, char)
	{ 9165005876865141497ull, &invoker_1744 },		//uint64_t(double, unsigned char)
	{ 11871178324619226464ull, &invoker_1745 },		//uint64_t(double, short)
	{ 17239327221979140187ull, &invoker_1746 },		//uint64_t(double, unsigned short)
	{ 6840149443325027089ull, &invoker_1747 },		//uint64_t(double, int)
	{ 10217060634368984170ull, &invoker_1748 },		//uint64_t(double, unsigned int)
	{ 2214259534051280350ull, &invoker_1749 },		//uint64_t(double, int64_t)
	{ 17924829063942700071ull, &invoker_1750 },		//uint64_t(double, uint64_t)
	{ 17263511057660793712ull, &invoker_1751 },		//uint64_t(double, float)
	{ 6007756625998523087ull, &invoker_1752 },		//uint64_t(double, double)
	{ 14399191842254798204ull, &invoker_1753 },		//float(const char*, const char*)
	{ 14712854991406449799ull, &invoker_1754 },		//float(const char*, bool)
	{ 17614038434938285363ull, &invoker_1755 },		//float(const char*, char)
	{ 11922243960401405296ull, &invoker_1756 },		//float(const char*, unsigned char)
	{ 15795066190720641997ull, &invoker_1757 },		//float(const char*, short)
	{ 10482303321625093024ull, &invoker_1758 },		//float(const char*, unsigned short)
	{ 5807548620535097524ull, &invoker_1759 },		//float(const char*, int)
	{ 9951360832289461841ull, &invoker_1760 },		//float(const char*, unsigned int)
	{ 14011255968050195127ull, &invoker_1761 },		//float(const char*, int64_t)
	{ 7420431174362675212ull, &invoker_1762 },		//float(const char*, uint64_t)
	{ 7850956218100697733ull, &invoker_1763 },		//float(const char*, float)
	{ 3690970009582665848ull, &invoker_1764 },		//float(const char*, double)
	{ 185223704197204219ull, &invoker_1765 },		//float(bool, const char*)
	{ 2837122132702668366ull, &invoker_1766 },		//float(bool, bool)
	{ 190374233045684258ull, &invoker_1767 },		//float(bool, char)
	{ 4512798078155475167ull, &invoker_1768 },		//float(bool, unsigned char)
	{ 15135583377521688114ull, &invoker_1769 },		//float(bool, short)
	{ 2454445606679936657ull, &invoker_1770 },		//float(bool, unsigned short)
	{ 10410882087142877107ull, &invoker_1771 },		//float(bool, int)
	{ 2251377669251434648ull, &invoker_1772 },		//float(bool, unsigned int)
	{ 4835638993827740888ull, &invoker_1773 },		//float(bool, int64_t)
	{ 217395004275015685ull, &invoker_1774 },		//float(bool, uint64_t)
	{ 14371685846485668190ull, &invoker_1775 },		//float(bool, float)
	{ 4262617672314677257ull, &invoker_1776 },		//float(bool, double)
	{ 2901657333749904775ull, &invoker_1777 },		//float(char, const char*)
	{ 12954291359931405218ull, &invoker_1778 },		//float(char, bool)
	{ 7090169842836035726ull, &invoker_1779 },		//float(char, char)
	{ 13589762955872350083ull, &invoker_1780 },		//float(char, unsigned char)
	{ 5935325064904751830ull, &invoker_1781 },		//float(char, short)
	{ 3092571105761244989ull, &invoker_1782 },		//float(char, unsigned short)
	{ 9103899635206428871ull, &invoker_1783 },		//float(char, int)
	{ 9125093637168472996ull, &invoker_1784 },		//float(char, unsigned int)
	{ 17329109130385268908ull, &invoker_1785 },		//float(char, int64_t)
	{ 11446068636574122761ull, &invoker_1786 },		//float(char, uint64_t)
	{ 15520385879180532850ull, &invoker_1787 },		//float(char, float)
	{ 2818639062760707997ull, &invoker_1788 },		//float(char, double)
	{ 3977297497038180392ull, &invoker_1789 },		//float(unsigned char, const char*)
	{ 3845837959819126843ull, &invoker_1790 },		//float(unsigned char, bool)
	{ 10952070274547396479ull, &invoker_1791 },		//float(unsigned char, char)
	{ 3645972616803883876ull, &invoker_1792 },		//float(unsigned char, unsigned char)
	{ 17892139125650355121ull, &invoker_1793 },		//float(unsigned char, short)
	{ 17858059696369562620ull, &invoker_1794 },		//float(unsigned char, unsigned short)
	{ 6242007300542135352ull, &invoker_1795 },		//float(unsigned char, int)
	{ 5238700445072164573ull, &invoker_1796 },		//float(unsigned char, unsigned int)
	{ 17316886474573560091ull, &invoker_1797 },		//float(unsigned char, int64_t)
	{ 7503911656645377328ull, &invoker_1798 },		//float(unsigned char, uint64_t)
	{ 14437697986612893113ull, &invoker_1799 },		//float(unsigned char, float)
	{ 11236587505200744636ull, &invoker_1800 },		//float(unsigned char, double)
	{ 17760623057691526327ull, &invoker_1801 },		//float(short, const char*)
	{ 11215391708913384146ull, &invoker_1802 },		//float(short, bool)
	{ 14383874870595572318ull, &invoker_1803 },		//float(short, char)
	{ 2568040124151877555ull, &invoker_1804 },		//float(short, unsigned char)
	{ 8795237165928637126ull, &invoker_1805 },		//float(short, short)
	{ 9211522894363265869ull, &invoker_1806 },		//float(short, unsigned short)
	{ 8392110162655963191ull, &invoker_1807 },		//float(short, int)
	{ 8146499800990563380ull, &invoker_1808 },		//float(short, unsigned int)
	{ 4432096392129284508ull, &invoker_1809 },		//float(short, int64_t)
	{ 8620475421094322489ull, &invoker_1810 },		//float(short, uint64_t)
	{ 9371853400561422370ull, &invoker_1811 },		//float(short, float)
	{ 2469715652746740269ull, &invoker_1812 },		//float(short, double)
	{ 8577560624817234874ull, &invoker_1813 },		//float(unsigned short, const char*)
	{ 14850983955342931633ull, &invoker_1814 },		//float(unsigned short, bool)
	{ 15173166640619051601ull, &invoker_1815 },		//float(unsigned short, char)
	{ 13161641001613336114ull, &invoker_1816 },		//float(unsigned short, unsigned char)
	{ 9579867259417259571ull, &invoker_1817 },		//float(unsigned short, short)
	{ 4927864893508582242ull, &invoker_1818 },		//float(unsigned short, unsigned short)
	{ 9552146708034779746ull, &invoker_1819 },		//float(unsigned short, int)
	{ 2874766105001696739ull, &invoker_1820 },		//float(unsigned short, unsigned int)
	{ 4043231587537073245ull, &invoker_1821 },		//float(unsigned short, int64_t)
	{ 10764200838881175262ull, &invoker_1822 },		//float(unsigned short, uint64_t)
	{ 18287293805834755063ull, &invoker_1823 },		//float(unsigned short, float)
	{ 11666901639338437198ull, &invoker_1824 },		//float(unsigned short, double)
	{ 12406108885839671892ull, &invoker_1825 },		//float(int, const char*)
	{ 17248562599662602943ull, &invoker_1826 },		//float(int, bool)
	{ 3791000958638433035ull, &invoker_1827 },		//float(int, char)
	{ 7599127089877625064ull, &invoker_1828 },		//float(int, unsigned char)
	{ 7279313402392678213ull, &invoker_1829 },		//float(int, short)
	{ 7364643457617655416ull, &invoker_1830 },		//float(int, unsigned short)
	{ 1612631993214252ull, &invoker_1831 },		//float(int, int)
	{ 9899037634000995081ull, &invoker_1832 },		//float(int, unsigned int)
	{ 16707384334157625311ull, &invoker_1833 },		//float(int, int64_t)
	{ 10150306748268068228ull, &invoker_1834 },		//float(int, uint64_t)
	{ 17626044673334435229ull, &invoker_1835 },		//float(int, float)
	{ 7309168606136679488ull, &invoker_1836 },		//float(int, double)
	{ 2980126352060337901ull, &invoker_1837 },		//float(unsigned int, const char*)
	{ 7908428788892300988ull, &invoker_1838 },		//float(unsigned int, bool)
	{ 13205650522842523068ull, &invoker_1839 },		//float(unsigned int, char)
	{ 11867677997310179197ull, &invoker_1840 },		//float(unsigned int, unsigned char)
	{ 546652464578186996ull, &invoker_1841 },		//float(unsigned int, short)
	{ 12087027550351443687ull, &invoker_1842 },		//float(unsigned int, unsigned short)
	{ 8775351801863060565ull, &invoker_1843 },		//float(unsigned int, int)
	{ 9875431821996671174ull, &invoker_1844 },		//float(unsigned int, unsigned int)
	{ 12399047827345113714ull, &invoker_1845 },		//float(unsigned int, int64_t)
	{ 11257630752952567931ull, &invoker_1846 },		//float(unsigned int, uint64_t)
	{ 16340412544327607652ull, &invoker_1847 },		//float(unsigned int, float)
	{ 13319223269718583923ull, &invoker_1848 },		//float(unsigned int, double)
	{ 10246307590148972045ull, &invoker_1849 },		//float(int64_t, const char*)
	{ 16960431481864820956ull, &invoker_1850 },		//float(int64_t, bool)
	{ 4194831843977066204ull, &invoker_1851 },		//float(int64_t, char)
	{ 11175127287028206749ull, &invoker_1852 },		//float(int64_t, unsigned char)
	{ 28027141421396756ull, &invoker_1853 },		//float(int64_t, short)
	{ 12894321692866203143ull, &invoker_1854 },		//float(int64_t, unsigned short)
	{ 11408394458719741941ull, &invoker_1855 },		//float(int64_t, int)
	{ 13160602752613096934ull, &invoker_1856 },		//float(int64_t, unsigned int)
	{ 11110771620031285970ull, &invoker_1857 },		//float(int64_t, int64_t)
	{ 16158305585493291867ull, &invoker_1858 },		//float(int64_t, uint64_t)
	{ 3359004530739660292ull, &invoker_1859 },		//float(int64_t, float)
	{ 5490450178321277331ull, &invoker_1860 },		//float(int64_t, double)
	{ 15393639024681974630ull, &invoker_1861 },		//float(uint64_t, const char*)
	{ 13689424338200920037ull, &invoker_1862 },		//float(uint64_t, bool)
	{ 11177927409491561517ull, &invoker_1863 },		//float(uint64_t, char)
	{ 2054145246783466630ull, &invoker_1864 },		//float(uint64_t, unsigned char)
	{ 11180485814368550135ull, &invoker_1865 },		//float(uint64_t, short)
	{ 14066385062716528302ull, &invoker_1866 },		//float(uint64_t, unsigned short)
	{ 3318195505076221590ull, &invoker_1867 },		//float(uint64_t, int)
	{ 16493492029271780127ull, &invoker_1868 },		//float(uint64_t, unsigned int)
	{ 10384480704236589953ull, &invoker_1869 },		//float(uint64_t, int64_t)
	{ 4475849550421389122ull, &invoker_1870 },		//float(uint64_t, uint64_t)
	{ 13335330649792469771ull, &invoker_1871 },		//float(uint64_t, float)
	{ 14187949557476587762ull, &invoker_1872 },		//float(uint64_t, double)
	{ 13335212570612650315ull, &invoker_1873 },		//float(float, const char*)
	{ 9661137415267192414ull, &invoker_1874 },		//float(float, bool)
	{ 3695740624173986642ull, &invoker_1875 },		//float(float, char)
	{ 8001252121236188783ull, &invoker_1876 },		//float(float, unsigned char)
	{ 3985165333919751170ull, &invoker_1877 },		//float(float, short)
	{ 4257487038889153729ull, &invoker_1878 },		//float(float, unsigned short)
	{ 10008759413637499523ull, &invoker_1879 },		//float(float, int)
	{ 12189675725694321160ull, &invoker_1880 },		//float(float, unsigned int)
	{ 12242680588962581352ull, &invoker_1881 },		//float(float, int64_t)
	{ 2493567027658150165ull, &invoker_1882 },		//float(float, uint64_t)
	{ 2773851381572359342ull, &invoker_1883 },		//float(float, float)
	{ 17644365557243842809ull, &invoker_1884 },		//float(float, double)
	{ 18112747347093018450ull, &invoker_1885 },		//float(double, const char*)
	{ 11040486456378854857ull, &invoker_1886 },		//float(double, bool)
	{ 9534495314015217481ull, &invoker_1887 },		//float(double, char)
	{ 16571021962975994794ull, &invoker_1888 },		//float(double, unsigned char)
	{ 3302360334731309771ull, &invoker_1889 },		//float(double, short)
	{ 18361190906070947450ull, &invoker_1890 },		//float(double, unsigned short)
	{ 13149604202972143066ull, &invoker_1891 },		//float(double, int)
	{ 5354567093621027643ull, &invoker_1892 },		//float(double, unsigned int)
	{ 409739112276357285ull, &invoker_1893 },		//float(double, int64_t)
	{ 3128451785355311958ull, &invoker_1894 },		//float(double, uint64_t)
	{ 1133797024358705679ull, &invoker_1895 },		//float(double, float)
	{ 12881515728788750742ull, &invoker_1896 },		//float(double, double)
	{ 9647550275869773053ull, &invoker_1897 },		//double(const char*, const char*)
	{ 926487385375095820ull, &invoker_1898 },		//double(const char*, bool)
	{ 15448415886527073964ull, &invoker_1899 },		//double(const char*, char)
	{ 10592284836935423309ull, &invoker_1900 },		//double(const char*, unsigned char)
	{ 2778692307295607876ull, &invoker_1901 },		//double(const char*, short)
	{ 3938653842134205719ull, &invoker_1902 },		//double(const char*, unsigned short)
	{ 3964833460593665381ull, &invoker_1903 },		//double(const char*, int)
	{ 1085303371475544374ull, &invoker_1904 },		//double(const char*, unsigned int)
	{ 15497851637364034306ull, &invoker_1905 },		//double(const char*, int64_t)
	{ 15906595817087443787ull, &invoker_1906 },		//double(const char*, uint64_t)
	{ 2942907294377893428ull, &invoker_1907 },		//double(const char*, float)
	{ 7101671648561284579ull, &invoker_1908 },		//double(const char*, double)
	{ 9383960818262213916ull, &invoker_1909 },		//double(bool, const char*)
	{ 17661114372759777959ull, &invoker_1910 },		//double(bool, bool)
	{ 14327908578199389779ull, &invoker_1911 },		//double(bool, char)
	{ 11958469466355050640ull, &invoker_1912 },		//double(bool, unsigned char)
	{ 5793668270529183469ull, &invoker_1913 },		//double(bool, short)
	{ 11159496924909394624ull, &invoker_1914 },		//double(bool, unsigned short)
	{ 1751969767123169748ull, &invoker_1915 },		//double(bool, int)
	{ 4811977384318957169ull, &invoker_1916 },		//double(bool, unsigned int)
	{ 11649497769195607959ull, &invoker_1917 },		//double(bool, int64_t)
	{ 8309117252519857900ull, &invoker_1918 },		//double(bool, uint64_t)
	{ 4078262173485935013ull, &invoker_1919 },		//double(bool, float)
	{ 7806636557913954840ull, &invoker_1920 },		//double(bool, double)
	{ 7563015060218100040ull, &invoker_1921 },		//double(char, const char*)
	{ 14114522991891244123ull, &invoker_1922 },		//double(char, bool)
	{ 2390088531038387359ull, &invoker_1923 },		//double(char, char)
	{ 10920346709238502532ull, &invoker_1924 },		//double(char, unsigned char)
	{ 2628288159200884305ull, &invoker_1925 },		//double(char, short)
	{ 12695369012715780764ull, &invoker_1926 },		//double(char, unsigned short)
	{ 6198150472684846936ull, &invoker_1927 },		//double(char, int)
	{ 13969493468409993469ull, &invoker_1928 },		//double(char, unsigned int)
	{ 13285438685099508091ull, &invoker_1929 },		//double(char, int64_t)
	{ 6421113351555335056ull, &invoker_1930 },		//double(char, uint64_t)
	{ 11247021646207476697ull, &invoker_1931 },		//double(char, float)
	{ 11665828095049229020ull, &invoker_1932 },		//double(char, double)
	{ 2739783241750029697ull, &invoker_1933 },		//double(unsigned char, const char*)
	{ 13156676749498683064ull, &invoker_1934 },		//double(unsigned char, bool)
	{ 15967337725454373072ull, &invoker_1935 },		//double(unsigned char, char)
	{ 15796647005362305433ull, &invoker_1936 },		//double(unsigned char, unsigned char)
	{ 7451165791392010496ull, &invoker_1937 },		//double(unsigned char, short)
	{ 4832616834340822395ull, &invoker_1938 },		//double(unsigned char, unsigned short)
	{ 15233413113293986993ull, &invoker_1939 },		//double(unsigned char, int)
	{ 2992139868271146122ull, &invoker_1940 },		//double(unsigned char, unsigned int)
	{ 17519147428572013630ull, &invoker_1941 },		//double(unsigned char, int64_t)
	{ 781733727327263623ull, &invoker_1942 },		//double(unsigned char, uint64_t)
	{ 6998858088216867728ull, &invoker_1943 },		//double(unsigned char, float)
	{ 16609684585264250863ull, &invoker_1944 },		//double(unsigned char, double)
	{ 9326272067107285594ull, &invoker_1945 },		//double(short, const char*)
	{ 10595648457979074641ull, &invoker_1946 },		//double(short, bool)
	{ 11301613107638358385ull, &invoker_1947 },		//double(short, char)
	{ 3032015205164855250ull, &invoker_1948 },		//double(short, unsigned char)
	{ 12210435374166241619ull, &invoker_1949 },		//double(short, short)
	{ 2359091948143487362ull, &invoker_1950 },		//double(short, unsigned short)
	{ 12418674694184655746ull, &invoker_1951 },		//double(short, int)
	{ 1758615562725448707ull, &invoker_1952 },		//double(short, unsigned int)
	{ 10297027184927131581ull, &invoker_1953 },		//double(short, int64_t)
	{ 4857705559760550846ull, &invoker_1954 },		//double(short, uint64_t)
	{ 2470977109385774487ull, &invoker_1955 },		//double(short, float)
	{ 202793439105094766ull, &invoker_1956 },		//double(short, double)
	{ 5014008042201949465ull, &invoker_1957 },		//double(unsigned short, const char*)
	{ 12878453169268876304ull, &invoker_1958 },		//double(unsigned short, bool)
	{ 7702728650860629864ull, &invoker_1959 },		//double(unsigned short, char)
	{ 3716687721669482897ull, &invoker_1960 },		//double(unsigned short, unsigned char)
	{ 7568292584708481528ull, &invoker_1961 },		//double(unsigned short, short)
	{ 5701716756411719539ull, &invoker_1962 },		//double(unsigned short, unsigned short)
	{ 15008449426205115017ull, &invoker_1963 },		//double(unsigned short, int)
	{ 98596854500066978ull, &invoker_1964 },		//double(unsigned short, unsigned int)
	{ 15231404004431773222ull, &invoker_1965 },		//double(unsigned short, int64_t)
	{ 7981661901954542047ull, &invoker_1966 },		//double(unsigned short, uint64_t)
	{ 9690535659113348936ull, &invoker_1967 },		//double(unsigned short, float)
	{ 8817341946544881431ull, &invoker_1968 },		//double(unsigned short, double)
	{ 6203160963066962701ull, &invoker_1969 },		//double(int, const char*)
	{ 1064924115093813212ull, &invoker_1970 },		//double(int, bool)
	{ 6746068550915610076ull, &invoker_1971 },		//double(int, char)
	{ 16853629359977552285ull, &invoker_1972 },		//double(int, unsigned char)
	{ 3182205547978252308ull, &invoker_1973 },		//double(int, short)
	{ 1310786340252706055ull, &invoker_1974 },		//double(int, unsigned short)
	{ 14703623184561016053ull, &invoker_1975 },		//double(int, int)
	{ 6059295213322263782ull, &invoker_1976 },		//double(int, unsigned int)
	{ 2022921284484874194ull, &invoker_1977 },		//double(int, int64_t)
	{ 7625212613368316507ull, &invoker_1978 },		//double(int, uint64_t)
	{ 6513182937296515844ull, &invoker_1979 },		//double(int, float)
	{ 13034079506773579923ull, &invoker_1980 },		//double(int, double)
	{ 15095168726615063870ull, &invoker_1981 },		//double(unsigned int, const char*)
	{ 5203612574368223229ull, &invoker_1982 },		//double(unsigned int, bool)
	{ 1469694303227736837ull, &invoker_1983 },		//double(unsigned int, char)
	{ 9544036545506323710ull, &invoker_1984 },		//double(unsigned int, unsigned char)
	{ 14175724957324435567ull, &invoker_1985 },		//double(unsigned int, short)
	{ 1483883264416510950ull, &invoker_1986 },		//double(unsigned int, unsigned short)
	{ 8750135150399489710ull, &invoker_1987 },		//double(unsigned int, int)
	{ 9387940524936074071ull, &invoker_1988 },		//double(unsigned int, unsigned int)
	{ 6822891785612837961ull, &invoker_1989 },		//double(unsigned int, int64_t)
	{ 1414943791606776250ull, &invoker_1990 },		//double(unsigned int, uint64_t)
	{ 15295324990919584195ull, &invoker_1991 },		//double(unsigned int, float)
	{ 7238592001317977978ull, &invoker_1992 },		//double(unsigned int, double)
	{ 13120881741502072060ull, &invoker_1993 },		//double(int64_t, const char*)
	{ 5974935989136667399ull, &invoker_1994 },		//double(int64_t, bool)
	{ 8876119432668502963ull, &invoker_1995 },		//double(int64_t, char)
	{ 11488138714922375408ull, &invoker_1996 },		//double(int64_t, unsigned char)
	{ 6970375825306349389ull, &invoker_1997 },		//double(int64_t, short)
	{ 7749754102496585248ull, &invoker_1998 },		//double(int64_t, unsigned short)
	{ 5176364716925583412ull, &invoker_1999 },		//double(int64_t, int)
	{ 4336538922910422225ull, &invoker_2000 },		//double(int64_t, unsigned int)
	{ 17123476989185653303ull, &invoker_2001 },		//double(int64_t, int64_t)
	{ 1388037945159470732ull, &invoker_2002 },		//double(int64_t, uint64_t)
	{ 17473009926395956741ull, &invoker_2003 },		//double(int64_t, float)
	{ 14214276527365763832ull, &invoker_2004 },		//double(int64_t, double)
	{ 18086289151765487045ull, &invoker_2005 },		//double(uint64_t, const char*)
	{ 4401111943288981652ull, &invoker_2006 },		//double(uint64_t, bool)
	{ 12071710785218778708ull, &invoker_2007 },		//double(uint64_t, char)
	{ 6397239101853832917ull, &invoker_2008 },		//double(uint64_t, unsigned char)
	{ 15690348703662209996ull, &invoker_2009 },		//double(uint64_t, short)
	{ 3365082115642377055ull, &invoker_2010 },		//double(uint64_t, unsigned short)
	{ 13024938121175922413ull, &invoker_2011 },		//double(uint64_t, int)
	{ 17400770069216636702ull, &invoker_2012 },		//double(uint64_t, unsigned int)
	{ 11699261317751859770ull, &invoker_2013 },		//double(uint64_t, int64_t)
	{ 3853333827474684403ull, &invoker_2014 },		//double(uint64_t, uint64_t)
	{ 808254000106682620ull, &invoker_2015 },		//double(uint64_t, float)
	{ 8611252550455746523ull, &invoker_2016 },		//double(uint64_t, double)
	{ 12952451461568317762ull, &invoker_2017 },		//double(float, const char*)
	{ 7553072817270427065ull, &invoker_2018 },		//double(float, bool)
	{ 12210260067120049625ull, &invoker_2019 },		//double(float, char)
	{ 4568721264015879130ull, &invoker_2020 },		//double(float, unsigned char)
	{ 6443451720689376699ull, &invoker_2021 },		//double(float, short)
	{ 14171667216469996426ull, &invoker_2022 },		//double(float, unsigned short)
	{ 18082938900860128458ull, &invoker_2023 },		//double(float, int)
	{ 295545242557226379ull, &invoker_2024 },		//double(float, unsigned int)
	{ 6558622604333183445ull, &invoker_2025 },		//double(float, int64_t)
	{ 9773915602873272006ull, &invoker_2026 },		//double(float, uint64_t)
	{ 1333826473752117951ull, &invoker_2027 },		//double(float, float)
	{ 10078776768960668198ull, &invoker_2028 },		//double(float, double)
	{ 1870120793287157721ull, &invoker_2029 },		//double(double, const char*)
	{ 5839825623047987152ull, &invoker_2030 },		//double(double, bool)
	{ 12247650008598781480ull, &invoker_2031 },		//double(double, char)
	{ 16807306600861478865ull, &invoker_2032 },		//double(double, unsigned char)
	{ 11560577286172173752ull, &invoker_2033 },		//double(double, short)
	{ 10615457207753782963ull, &invoker_2034 },		//double(double, unsigned short)
	{ 5519803091037620041ull, &invoker_2035 },		//double(double, int)
	{ 4983380208488287970ull, &invoker_2036 },		//double(double, unsigned int)
	{ 6204500311632807142ull, &invoker_2037 },		//double(double, int64_t)
	{ 10333393002203291039ull, &invoker_2038 },		//double(double, uint64_t)
	{ 8082922416658632456ull, &invoker_2039 },		//double(double, float)
	{ 4553022478936290519ull, &invoker_2040 },		//double(double, double)
};

void handleFunction( const char* pFunctionName, ParamHandler& parameters )
{
	const binderoo::BoundFunction* pFunction = binderoo::Host::getActiveHost()->getImportedFunctionDetails( pFunctionName );
	if( pFunction )
	{
		auto found = mapSignaturesToHandlers.find( pFunction->functionHashes.uFunctionSignatureHash );
		if( found != mapSignaturesToHandlers.end() )
		{
			found->second( pFunctionName, parameters );
		}
		else
		{
			parameters.setReturn( "Function cannot be called!" );
		}
	}
	else
	{
		parameters.setReturn( "Function does not exist!" );
	}
}
